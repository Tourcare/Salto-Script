import type { Client, ClientOptions } from './client.js';
import type { ResolveActionAttemptOptions } from './resolve-action-attempt.js';
export type SeamHttpWithoutWorkspaceOptions = SeamHttpWithoutWorkspaceOptionsFromEnv | SeamHttpWithoutWorkspaceOptionsWithClient | SeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken | SeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken;
export type SeamHttpOptions = SeamHttpOptionsFromEnv | SeamHttpOptionsWithClient | SeamHttpOptionsWithApiKey | SeamHttpOptionsWithClientSessionToken | SeamHttpOptionsWithConsoleSessionToken | SeamHttpOptionsWithPersonalAccessToken;
interface SeamHttpCommonOptions extends ClientOptions, SeamHttpRequestOptions {
    endpoint?: string;
}
export interface SeamHttpRequestOptions {
    waitForActionAttempt?: boolean | ResolveActionAttemptOptions;
    isUndocumentedApiEnabled?: boolean;
}
export interface SeamHttpFromPublishableKeyOptions extends SeamHttpCommonOptions {
}
export interface SeamHttpOptionsFromEnv extends SeamHttpCommonOptions {
}
export interface SeamHttpWithoutWorkspaceOptionsFromEnv extends SeamHttpCommonOptions {
}
export interface SeamHttpWithoutWorkspaceOptionsWithClient extends SeamHttpCommonOptions {
    client: Client;
}
export declare const isSeamHttpWithoutWorkspaceOptionsWithClient: (options: SeamHttpOptions) => options is SeamHttpWithoutWorkspaceOptionsWithClient;
export interface SeamHttpOptionsWithClient extends SeamHttpRequestOptions {
    client: Client;
}
export declare const isSeamHttpOptionsWithClient: (options: SeamHttpOptions) => options is SeamHttpOptionsWithClient;
export interface SeamHttpOptionsWithApiKey extends SeamHttpCommonOptions {
    apiKey: string;
}
export declare const isSeamHttpOptionsWithApiKey: (options: SeamHttpOptions) => options is SeamHttpOptionsWithApiKey;
export interface SeamHttpOptionsWithClientSessionToken extends SeamHttpCommonOptions {
    clientSessionToken: string;
}
export declare const isSeamHttpOptionsWithClientSessionToken: (options: SeamHttpOptions) => options is SeamHttpOptionsWithClientSessionToken;
export interface SeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken extends SeamHttpCommonOptions {
    consoleSessionToken: string;
}
export declare const isSeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken: (options: SeamHttpOptions) => options is SeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken;
export interface SeamHttpOptionsWithConsoleSessionToken extends SeamHttpCommonOptions {
    consoleSessionToken: string;
    workspaceId: string;
}
export declare const isSeamHttpOptionsWithConsoleSessionToken: (options: SeamHttpOptions) => options is SeamHttpOptionsWithConsoleSessionToken;
export interface SeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken extends SeamHttpCommonOptions {
    personalAccessToken: string;
}
export declare const isSeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken: (options: SeamHttpOptions) => options is SeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken;
export interface SeamHttpOptionsWithPersonalAccessToken extends SeamHttpCommonOptions {
    personalAccessToken: string;
    workspaceId: string;
}
export declare const isSeamHttpOptionsWithPersonalAccessToken: (options: SeamHttpOptions) => options is SeamHttpOptionsWithPersonalAccessToken;
export declare class SeamHttpInvalidOptionsError extends Error {
    constructor(message: string);
}
export declare class SeamHttpWithoutWorkspaceInvalidOptionsError extends Error {
    constructor(message: string);
}
export {};
