import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
export declare class SeamHttpInstantKeys {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpInstantKeys;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpInstantKeys;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpInstantKeys;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpInstantKeys>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpInstantKeys;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpInstantKeys;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    delete(parameters?: InstantKeysDeleteParameters, options?: InstantKeysDeleteOptions): InstantKeysDeleteRequest;
    get(parameters?: InstantKeysGetParameters, options?: InstantKeysGetOptions): InstantKeysGetRequest;
    list(parameters?: InstantKeysListParameters, options?: InstantKeysListOptions): InstantKeysListRequest;
}
export type InstantKeysDeleteParameters = RouteRequestBody<'/instant_keys/delete'>;
/**
 * @deprecated Use InstantKeysDeleteParameters instead.
 */
export type InstantKeysDeleteParams = InstantKeysDeleteParameters;
/**
 * @deprecated Use InstantKeysDeleteRequest instead.
 */
export type InstantKeysDeleteResponse = SetNonNullable<Required<RouteResponse<'/instant_keys/delete'>>>;
export type InstantKeysDeleteRequest = SeamHttpRequest<void, undefined>;
export interface InstantKeysDeleteOptions {
}
export type InstantKeysGetParameters = RouteRequestBody<'/instant_keys/get'>;
/**
 * @deprecated Use InstantKeysGetParameters instead.
 */
export type InstantKeysGetParams = InstantKeysGetParameters;
/**
 * @deprecated Use InstantKeysGetRequest instead.
 */
export type InstantKeysGetResponse = SetNonNullable<Required<RouteResponse<'/instant_keys/get'>>>;
export type InstantKeysGetRequest = SeamHttpRequest<InstantKeysGetResponse, 'instant_key'>;
export interface InstantKeysGetOptions {
}
export type InstantKeysListParameters = RouteRequestBody<'/instant_keys/list'>;
/**
 * @deprecated Use InstantKeysListParameters instead.
 */
export type InstantKeysListParams = InstantKeysListParameters;
/**
 * @deprecated Use InstantKeysListRequest instead.
 */
export type InstantKeysListResponse = SetNonNullable<Required<RouteResponse<'/instant_keys/list'>>>;
export type InstantKeysListRequest = SeamHttpRequest<InstantKeysListResponse, 'instant_keys'>;
export interface InstantKeysListOptions {
}
