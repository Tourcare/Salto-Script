import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpAccessMethodsUnmanaged {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAccessMethodsUnmanaged;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAccessMethodsUnmanaged;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAccessMethodsUnmanaged;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAccessMethodsUnmanaged>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAccessMethodsUnmanaged;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAccessMethodsUnmanaged;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get(parameters?: AccessMethodsUnmanagedGetParameters, options?: AccessMethodsUnmanagedGetOptions): AccessMethodsUnmanagedGetRequest;
    list(parameters?: AccessMethodsUnmanagedListParameters, options?: AccessMethodsUnmanagedListOptions): AccessMethodsUnmanagedListRequest;
}
export type AccessMethodsUnmanagedGetParameters = RouteRequestBody<'/access_methods/unmanaged/get'>;
/**
 * @deprecated Use AccessMethodsUnmanagedGetParameters instead.
 */
export type AccessMethodsUnmanagedGetParams = AccessMethodsUnmanagedGetParameters;
/**
 * @deprecated Use AccessMethodsUnmanagedGetRequest instead.
 */
export type AccessMethodsUnmanagedGetResponse = SetNonNullable<Required<RouteResponse<'/access_methods/unmanaged/get'>>>;
export type AccessMethodsUnmanagedGetRequest = SeamHttpRequest<AccessMethodsUnmanagedGetResponse, 'access_method'>;
export interface AccessMethodsUnmanagedGetOptions {
}
export type AccessMethodsUnmanagedListParameters = RouteRequestBody<'/access_methods/unmanaged/list'>;
/**
 * @deprecated Use AccessMethodsUnmanagedListParameters instead.
 */
export type AccessMethodsUnmanagedListParams = AccessMethodsUnmanagedListParameters;
/**
 * @deprecated Use AccessMethodsUnmanagedListRequest instead.
 */
export type AccessMethodsUnmanagedListResponse = SetNonNullable<Required<RouteResponse<'/access_methods/unmanaged/list'>>>;
export type AccessMethodsUnmanagedListRequest = SeamHttpRequest<AccessMethodsUnmanagedListResponse, 'access_methods'>;
export interface AccessMethodsUnmanagedListOptions {
}
