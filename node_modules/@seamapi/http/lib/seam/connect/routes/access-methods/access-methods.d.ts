import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
import { SeamHttpAccessMethodsUnmanaged } from './unmanaged/index.js';
export declare class SeamHttpAccessMethods {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAccessMethods;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAccessMethods;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAccessMethods;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAccessMethods>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAccessMethods;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAccessMethods;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get unmanaged(): SeamHttpAccessMethodsUnmanaged;
    delete(parameters?: AccessMethodsDeleteParameters, options?: AccessMethodsDeleteOptions): AccessMethodsDeleteRequest;
    encode(parameters?: AccessMethodsEncodeParameters, options?: AccessMethodsEncodeOptions): AccessMethodsEncodeRequest;
    get(parameters?: AccessMethodsGetParameters, options?: AccessMethodsGetOptions): AccessMethodsGetRequest;
    getRelated(parameters?: AccessMethodsGetRelatedParameters, options?: AccessMethodsGetRelatedOptions): AccessMethodsGetRelatedRequest;
    list(parameters?: AccessMethodsListParameters, options?: AccessMethodsListOptions): AccessMethodsListRequest;
}
export type AccessMethodsDeleteParameters = RouteRequestBody<'/access_methods/delete'>;
/**
 * @deprecated Use AccessMethodsDeleteParameters instead.
 */
export type AccessMethodsDeleteParams = AccessMethodsDeleteParameters;
/**
 * @deprecated Use AccessMethodsDeleteRequest instead.
 */
export type AccessMethodsDeleteResponse = SetNonNullable<Required<RouteResponse<'/access_methods/delete'>>>;
export type AccessMethodsDeleteRequest = SeamHttpRequest<void, undefined>;
export interface AccessMethodsDeleteOptions {
}
export type AccessMethodsEncodeParameters = RouteRequestBody<'/access_methods/encode'>;
/**
 * @deprecated Use AccessMethodsEncodeParameters instead.
 */
export type AccessMethodsEncodeBody = AccessMethodsEncodeParameters;
/**
 * @deprecated Use AccessMethodsEncodeRequest instead.
 */
export type AccessMethodsEncodeResponse = SetNonNullable<Required<RouteResponse<'/access_methods/encode'>>>;
export type AccessMethodsEncodeRequest = SeamHttpRequest<AccessMethodsEncodeResponse, 'action_attempt'>;
export type AccessMethodsEncodeOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type AccessMethodsGetParameters = RouteRequestBody<'/access_methods/get'>;
/**
 * @deprecated Use AccessMethodsGetParameters instead.
 */
export type AccessMethodsGetParams = AccessMethodsGetParameters;
/**
 * @deprecated Use AccessMethodsGetRequest instead.
 */
export type AccessMethodsGetResponse = SetNonNullable<Required<RouteResponse<'/access_methods/get'>>>;
export type AccessMethodsGetRequest = SeamHttpRequest<AccessMethodsGetResponse, 'access_method'>;
export interface AccessMethodsGetOptions {
}
export type AccessMethodsGetRelatedParameters = RouteRequestBody<'/access_methods/get_related'>;
/**
 * @deprecated Use AccessMethodsGetRelatedParameters instead.
 */
export type AccessMethodsGetRelatedParams = AccessMethodsGetRelatedParameters;
/**
 * @deprecated Use AccessMethodsGetRelatedRequest instead.
 */
export type AccessMethodsGetRelatedResponse = SetNonNullable<Required<RouteResponse<'/access_methods/get_related'>>>;
export type AccessMethodsGetRelatedRequest = SeamHttpRequest<AccessMethodsGetRelatedResponse, 'batch'>;
export interface AccessMethodsGetRelatedOptions {
}
export type AccessMethodsListParameters = RouteRequestBody<'/access_methods/list'>;
/**
 * @deprecated Use AccessMethodsListParameters instead.
 */
export type AccessMethodsListParams = AccessMethodsListParameters;
/**
 * @deprecated Use AccessMethodsListRequest instead.
 */
export type AccessMethodsListResponse = SetNonNullable<Required<RouteResponse<'/access_methods/list'>>>;
export type AccessMethodsListRequest = SeamHttpRequest<AccessMethodsListResponse, 'access_methods'>;
export interface AccessMethodsListOptions {
}
