/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */
import { seamApiLtsVersion } from '../../../../../lib/lts-version.js';
import { getAuthHeadersForClientSessionToken, warnOnInsecureuserIdentifierKey, } from '../../../../../lib/seam/connect/auth.js';
import { createClient } from '../../../../../lib/seam/connect/client.js';
import { isSeamHttpOptionsWithApiKey, isSeamHttpOptionsWithClient, isSeamHttpOptionsWithClientSessionToken, isSeamHttpOptionsWithConsoleSessionToken, isSeamHttpOptionsWithPersonalAccessToken, SeamHttpInvalidOptionsError, } from '../../../../../lib/seam/connect/options.js';
import { limitToSeamHttpRequestOptions, parseOptions, } from '../../../../../lib/seam/connect/parse-options.js';
import { SeamHttpClientSessions } from '../../../../../lib/seam/connect/routes/client-sessions/index.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import { SeamHttpUserIdentitiesEnrollmentAutomations } from './enrollment-automations/index.js';
import { SeamHttpUserIdentitiesUnmanaged } from './unmanaged/index.js';
export class SeamHttpUserIdentities {
    client;
    defaults;
    ltsVersion = seamApiLtsVersion;
    static ltsVersion = seamApiLtsVersion;
    constructor(apiKeyOrOptions = {}) {
        const options = parseOptions(apiKeyOrOptions);
        this.client = 'client' in options ? options.client : createClient(options);
        this.defaults = limitToSeamHttpRequestOptions(options);
    }
    static fromClient(client, options = {}) {
        const constructorOptions = { ...options, client };
        if (!isSeamHttpOptionsWithClient(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing client');
        }
        return new SeamHttpUserIdentities(constructorOptions);
    }
    static fromApiKey(apiKey, options = {}) {
        const constructorOptions = { ...options, apiKey };
        if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing apiKey');
        }
        return new SeamHttpUserIdentities(constructorOptions);
    }
    static fromClientSessionToken(clientSessionToken, options = {}) {
        const constructorOptions = { ...options, clientSessionToken };
        if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing clientSessionToken');
        }
        return new SeamHttpUserIdentities(constructorOptions);
    }
    static async fromPublishableKey(publishableKey, userIdentifierKey, options = {}) {
        warnOnInsecureuserIdentifierKey(userIdentifierKey);
        const clientOptions = parseOptions({ ...options, publishableKey });
        if (isSeamHttpOptionsWithClient(clientOptions)) {
            throw new SeamHttpInvalidOptionsError('The client option cannot be used with SeamHttpUserIdentities.fromPublishableKey');
        }
        const client = createClient(clientOptions);
        const clientSessions = SeamHttpClientSessions.fromClient(client);
        const { token } = await clientSessions.getOrCreate({
            user_identifier_key: userIdentifierKey,
        });
        return SeamHttpUserIdentities.fromClientSessionToken(token, options);
    }
    static fromConsoleSessionToken(consoleSessionToken, workspaceId, options = {}) {
        const constructorOptions = { ...options, consoleSessionToken, workspaceId };
        if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing consoleSessionToken or workspaceId');
        }
        return new SeamHttpUserIdentities(constructorOptions);
    }
    static fromPersonalAccessToken(personalAccessToken, workspaceId, options = {}) {
        const constructorOptions = { ...options, personalAccessToken, workspaceId };
        if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing personalAccessToken or workspaceId');
        }
        return new SeamHttpUserIdentities(constructorOptions);
    }
    createPaginator(request) {
        return new SeamPaginator(this, request);
    }
    async updateClientSessionToken(clientSessionToken) {
        const { headers } = this.client.defaults;
        const authHeaders = getAuthHeadersForClientSessionToken({
            clientSessionToken,
        });
        for (const key of Object.keys(authHeaders)) {
            if (headers[key] == null) {
                throw new Error('Cannot update a clientSessionToken on a client created without a clientSessionToken');
            }
        }
        this.client.defaults.headers = { ...headers, ...authHeaders };
        const clientSessions = SeamHttpClientSessions.fromClient(this.client);
        await clientSessions.get();
    }
    get enrollmentAutomations() {
        return SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(this.client, this.defaults);
    }
    get unmanaged() {
        return SeamHttpUserIdentitiesUnmanaged.fromClient(this.client, this.defaults);
    }
    addAcsUser(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/add_acs_user',
            method: 'PUT',
            body: parameters,
            responseKey: undefined,
            options,
        });
    }
    create(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/create',
            method: 'POST',
            body: parameters,
            responseKey: 'user_identity',
            options,
        });
    }
    delete(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/delete',
            method: 'POST',
            body: parameters,
            responseKey: undefined,
            options,
        });
    }
    generateInstantKey(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/generate_instant_key',
            method: 'POST',
            body: parameters,
            responseKey: 'instant_key',
            options,
        });
    }
    get(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/get',
            method: 'GET',
            params: parameters,
            responseKey: 'user_identity',
            options,
        });
    }
    grantAccessToDevice(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/grant_access_to_device',
            method: 'PUT',
            body: parameters,
            responseKey: undefined,
            options,
        });
    }
    list(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/list',
            method: 'POST',
            body: parameters,
            responseKey: 'user_identities',
            options,
        });
    }
    listAccessibleDevices(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/list_accessible_devices',
            method: 'POST',
            body: parameters,
            responseKey: 'devices',
            options,
        });
    }
    listAcsSystems(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/list_acs_systems',
            method: 'POST',
            body: parameters,
            responseKey: 'acs_systems',
            options,
        });
    }
    listAcsUsers(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/list_acs_users',
            method: 'POST',
            body: parameters,
            responseKey: 'acs_users',
            options,
        });
    }
    removeAcsUser(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/remove_acs_user',
            method: 'POST',
            body: parameters,
            responseKey: undefined,
            options,
        });
    }
    revokeAccessToDevice(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/revoke_access_to_device',
            method: 'POST',
            body: parameters,
            responseKey: undefined,
            options,
        });
    }
    update(parameters, options = {}) {
        return new SeamHttpRequest(this, {
            pathname: '/user_identities/update',
            method: 'PATCH',
            body: parameters,
            responseKey: undefined,
            options,
        });
    }
}
//# sourceMappingURL=user-identities.js.map