import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpUserIdentitiesEnrollmentAutomations {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpUserIdentitiesEnrollmentAutomations;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpUserIdentitiesEnrollmentAutomations;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpUserIdentitiesEnrollmentAutomations;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpUserIdentitiesEnrollmentAutomations>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpUserIdentitiesEnrollmentAutomations;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpUserIdentitiesEnrollmentAutomations;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    delete(parameters?: UserIdentitiesEnrollmentAutomationsDeleteParameters, options?: UserIdentitiesEnrollmentAutomationsDeleteOptions): UserIdentitiesEnrollmentAutomationsDeleteRequest;
    get(parameters?: UserIdentitiesEnrollmentAutomationsGetParameters, options?: UserIdentitiesEnrollmentAutomationsGetOptions): UserIdentitiesEnrollmentAutomationsGetRequest;
    launch(parameters?: UserIdentitiesEnrollmentAutomationsLaunchParameters, options?: UserIdentitiesEnrollmentAutomationsLaunchOptions): UserIdentitiesEnrollmentAutomationsLaunchRequest;
    list(parameters?: UserIdentitiesEnrollmentAutomationsListParameters, options?: UserIdentitiesEnrollmentAutomationsListOptions): UserIdentitiesEnrollmentAutomationsListRequest;
}
export type UserIdentitiesEnrollmentAutomationsDeleteParameters = RouteRequestBody<'/user_identities/enrollment_automations/delete'>;
/**
 * @deprecated Use UserIdentitiesEnrollmentAutomationsDeleteParameters instead.
 */
export type UserIdentitiesEnrollmentAutomationsDeleteParams = UserIdentitiesEnrollmentAutomationsDeleteParameters;
/**
 * @deprecated Use UserIdentitiesEnrollmentAutomationsDeleteRequest instead.
 */
export type UserIdentitiesEnrollmentAutomationsDeleteResponse = SetNonNullable<Required<RouteResponse<'/user_identities/enrollment_automations/delete'>>>;
export type UserIdentitiesEnrollmentAutomationsDeleteRequest = SeamHttpRequest<void, undefined>;
export interface UserIdentitiesEnrollmentAutomationsDeleteOptions {
}
export type UserIdentitiesEnrollmentAutomationsGetParameters = RouteRequestBody<'/user_identities/enrollment_automations/get'>;
/**
 * @deprecated Use UserIdentitiesEnrollmentAutomationsGetParameters instead.
 */
export type UserIdentitiesEnrollmentAutomationsGetParams = UserIdentitiesEnrollmentAutomationsGetParameters;
/**
 * @deprecated Use UserIdentitiesEnrollmentAutomationsGetRequest instead.
 */
export type UserIdentitiesEnrollmentAutomationsGetResponse = SetNonNullable<Required<RouteResponse<'/user_identities/enrollment_automations/get'>>>;
export type UserIdentitiesEnrollmentAutomationsGetRequest = SeamHttpRequest<UserIdentitiesEnrollmentAutomationsGetResponse, 'enrollment_automation'>;
export interface UserIdentitiesEnrollmentAutomationsGetOptions {
}
export type UserIdentitiesEnrollmentAutomationsLaunchParameters = RouteRequestBody<'/user_identities/enrollment_automations/launch'>;
/**
 * @deprecated Use UserIdentitiesEnrollmentAutomationsLaunchParameters instead.
 */
export type UserIdentitiesEnrollmentAutomationsLaunchBody = UserIdentitiesEnrollmentAutomationsLaunchParameters;
/**
 * @deprecated Use UserIdentitiesEnrollmentAutomationsLaunchRequest instead.
 */
export type UserIdentitiesEnrollmentAutomationsLaunchResponse = SetNonNullable<Required<RouteResponse<'/user_identities/enrollment_automations/launch'>>>;
export type UserIdentitiesEnrollmentAutomationsLaunchRequest = SeamHttpRequest<UserIdentitiesEnrollmentAutomationsLaunchResponse, 'enrollment_automation'>;
export interface UserIdentitiesEnrollmentAutomationsLaunchOptions {
}
export type UserIdentitiesEnrollmentAutomationsListParameters = RouteRequestBody<'/user_identities/enrollment_automations/list'>;
/**
 * @deprecated Use UserIdentitiesEnrollmentAutomationsListParameters instead.
 */
export type UserIdentitiesEnrollmentAutomationsListParams = UserIdentitiesEnrollmentAutomationsListParameters;
/**
 * @deprecated Use UserIdentitiesEnrollmentAutomationsListRequest instead.
 */
export type UserIdentitiesEnrollmentAutomationsListResponse = SetNonNullable<Required<RouteResponse<'/user_identities/enrollment_automations/list'>>>;
export type UserIdentitiesEnrollmentAutomationsListRequest = SeamHttpRequest<UserIdentitiesEnrollmentAutomationsListResponse, 'enrollment_automations'>;
export interface UserIdentitiesEnrollmentAutomationsListOptions {
}
