import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpUserIdentitiesUnmanaged {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpUserIdentitiesUnmanaged;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpUserIdentitiesUnmanaged;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpUserIdentitiesUnmanaged;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpUserIdentitiesUnmanaged>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpUserIdentitiesUnmanaged;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpUserIdentitiesUnmanaged;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get(parameters?: UserIdentitiesUnmanagedGetParameters, options?: UserIdentitiesUnmanagedGetOptions): UserIdentitiesUnmanagedGetRequest;
    list(parameters?: UserIdentitiesUnmanagedListParameters, options?: UserIdentitiesUnmanagedListOptions): UserIdentitiesUnmanagedListRequest;
}
export type UserIdentitiesUnmanagedGetParameters = RouteRequestBody<'/user_identities/unmanaged/get'>;
/**
 * @deprecated Use UserIdentitiesUnmanagedGetParameters instead.
 */
export type UserIdentitiesUnmanagedGetParams = UserIdentitiesUnmanagedGetParameters;
/**
 * @deprecated Use UserIdentitiesUnmanagedGetRequest instead.
 */
export type UserIdentitiesUnmanagedGetResponse = SetNonNullable<Required<RouteResponse<'/user_identities/unmanaged/get'>>>;
export type UserIdentitiesUnmanagedGetRequest = SeamHttpRequest<UserIdentitiesUnmanagedGetResponse, 'user_identity'>;
export interface UserIdentitiesUnmanagedGetOptions {
}
export type UserIdentitiesUnmanagedListParameters = RouteRequestBody<'/user_identities/unmanaged/list'>;
/**
 * @deprecated Use UserIdentitiesUnmanagedListParameters instead.
 */
export type UserIdentitiesUnmanagedListParams = UserIdentitiesUnmanagedListParameters;
/**
 * @deprecated Use UserIdentitiesUnmanagedListRequest instead.
 */
export type UserIdentitiesUnmanagedListResponse = SetNonNullable<Required<RouteResponse<'/user_identities/unmanaged/list'>>>;
export type UserIdentitiesUnmanagedListRequest = SeamHttpRequest<UserIdentitiesUnmanagedListResponse, 'user_identities'>;
export interface UserIdentitiesUnmanagedListOptions {
}
