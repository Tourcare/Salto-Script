import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpRequestOptions, type SeamHttpWithoutWorkspaceOptions, type SeamHttpWithoutWorkspaceOptionsWithClient, type SeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken, type SeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken } from '../../../../lib/seam/connect/options.js';
import { SeamHttpWorkspaces } from '../../../../lib/seam/connect/routes/workspaces/index.js';
export declare class SeamHttpWithoutWorkspace {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(options?: SeamHttpWithoutWorkspaceOptions);
    static fromClient(client: SeamHttpWithoutWorkspaceOptionsWithClient['client'], options?: Omit<SeamHttpWithoutWorkspaceOptionsWithClient, 'client'>): SeamHttpWithoutWorkspace;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken['consoleSessionToken'], options?: Omit<SeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken, 'consoleSessionToken'>): SeamHttpWithoutWorkspace;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken['personalAccessToken'], options?: Omit<SeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken, 'personalAccessToken'>): SeamHttpWithoutWorkspace;
    get workspaces(): Pick<SeamHttpWorkspaces, 'create' | 'list'>;
}
/**
 * @deprecated Use SeamHttpWithoutWorkspace instead.
 */
export declare const SeamHttpMultiWorkspace: typeof SeamHttpWithoutWorkspace;
