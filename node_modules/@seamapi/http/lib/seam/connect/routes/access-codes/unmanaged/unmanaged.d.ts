import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpAccessCodesUnmanaged {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAccessCodesUnmanaged;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAccessCodesUnmanaged;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAccessCodesUnmanaged;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAccessCodesUnmanaged>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAccessCodesUnmanaged;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAccessCodesUnmanaged;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    convertToManaged(parameters?: AccessCodesUnmanagedConvertToManagedParameters, options?: AccessCodesUnmanagedConvertToManagedOptions): AccessCodesUnmanagedConvertToManagedRequest;
    delete(parameters?: AccessCodesUnmanagedDeleteParameters, options?: AccessCodesUnmanagedDeleteOptions): AccessCodesUnmanagedDeleteRequest;
    get(parameters?: AccessCodesUnmanagedGetParameters, options?: AccessCodesUnmanagedGetOptions): AccessCodesUnmanagedGetRequest;
    list(parameters?: AccessCodesUnmanagedListParameters, options?: AccessCodesUnmanagedListOptions): AccessCodesUnmanagedListRequest;
    update(parameters?: AccessCodesUnmanagedUpdateParameters, options?: AccessCodesUnmanagedUpdateOptions): AccessCodesUnmanagedUpdateRequest;
}
export type AccessCodesUnmanagedConvertToManagedParameters = RouteRequestBody<'/access_codes/unmanaged/convert_to_managed'>;
/**
 * @deprecated Use AccessCodesUnmanagedConvertToManagedParameters instead.
 */
export type AccessCodesUnmanagedConvertToManagedBody = AccessCodesUnmanagedConvertToManagedParameters;
/**
 * @deprecated Use AccessCodesUnmanagedConvertToManagedRequest instead.
 */
export type AccessCodesUnmanagedConvertToManagedResponse = SetNonNullable<Required<RouteResponse<'/access_codes/unmanaged/convert_to_managed'>>>;
export type AccessCodesUnmanagedConvertToManagedRequest = SeamHttpRequest<void, undefined>;
export interface AccessCodesUnmanagedConvertToManagedOptions {
}
export type AccessCodesUnmanagedDeleteParameters = RouteRequestBody<'/access_codes/unmanaged/delete'>;
/**
 * @deprecated Use AccessCodesUnmanagedDeleteParameters instead.
 */
export type AccessCodesUnmanagedDeleteParams = AccessCodesUnmanagedDeleteParameters;
/**
 * @deprecated Use AccessCodesUnmanagedDeleteRequest instead.
 */
export type AccessCodesUnmanagedDeleteResponse = SetNonNullable<Required<RouteResponse<'/access_codes/unmanaged/delete'>>>;
export type AccessCodesUnmanagedDeleteRequest = SeamHttpRequest<void, undefined>;
export interface AccessCodesUnmanagedDeleteOptions {
}
export type AccessCodesUnmanagedGetParameters = RouteRequestBody<'/access_codes/unmanaged/get'>;
/**
 * @deprecated Use AccessCodesUnmanagedGetParameters instead.
 */
export type AccessCodesUnmanagedGetParams = AccessCodesUnmanagedGetParameters;
/**
 * @deprecated Use AccessCodesUnmanagedGetRequest instead.
 */
export type AccessCodesUnmanagedGetResponse = SetNonNullable<Required<RouteResponse<'/access_codes/unmanaged/get'>>>;
export type AccessCodesUnmanagedGetRequest = SeamHttpRequest<AccessCodesUnmanagedGetResponse, 'access_code'>;
export interface AccessCodesUnmanagedGetOptions {
}
export type AccessCodesUnmanagedListParameters = RouteRequestBody<'/access_codes/unmanaged/list'>;
/**
 * @deprecated Use AccessCodesUnmanagedListParameters instead.
 */
export type AccessCodesUnmanagedListParams = AccessCodesUnmanagedListParameters;
/**
 * @deprecated Use AccessCodesUnmanagedListRequest instead.
 */
export type AccessCodesUnmanagedListResponse = SetNonNullable<Required<RouteResponse<'/access_codes/unmanaged/list'>>>;
export type AccessCodesUnmanagedListRequest = SeamHttpRequest<AccessCodesUnmanagedListResponse, 'access_codes'>;
export interface AccessCodesUnmanagedListOptions {
}
export type AccessCodesUnmanagedUpdateParameters = RouteRequestBody<'/access_codes/unmanaged/update'>;
/**
 * @deprecated Use AccessCodesUnmanagedUpdateParameters instead.
 */
export type AccessCodesUnmanagedUpdateBody = AccessCodesUnmanagedUpdateParameters;
/**
 * @deprecated Use AccessCodesUnmanagedUpdateRequest instead.
 */
export type AccessCodesUnmanagedUpdateResponse = SetNonNullable<Required<RouteResponse<'/access_codes/unmanaged/update'>>>;
export type AccessCodesUnmanagedUpdateRequest = SeamHttpRequest<void, undefined>;
export interface AccessCodesUnmanagedUpdateOptions {
}
