/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */
import { seamApiLtsVersion } from '../../../../lib/lts-version.js';
import { getAuthHeadersForClientSessionToken, warnOnInsecureuserIdentifierKey, } from '../../../../lib/seam/connect/auth.js';
import { createClient } from '../../../../lib/seam/connect/client.js';
import { isSeamHttpOptionsWithApiKey, isSeamHttpOptionsWithClient, isSeamHttpOptionsWithClientSessionToken, isSeamHttpOptionsWithConsoleSessionToken, isSeamHttpOptionsWithPersonalAccessToken, SeamHttpInvalidOptionsError, } from '../../../../lib/seam/connect/options.js';
import { limitToSeamHttpRequestOptions, parseOptions, } from '../../../../lib/seam/connect/parse-options.js';
import { SeamPaginator } from '../../../../lib/seam/connect/seam-paginator.js';
import { SeamHttpAccessCodes, } from './access-codes/index.js';
import { SeamHttpAccessCodesSimulate, } from './access-codes/simulate/index.js';
import { SeamHttpAccessCodesUnmanaged, } from './access-codes/unmanaged/index.js';
import { SeamHttpAccessGrants, } from './access-grants/index.js';
import { SeamHttpAccessGrantsUnmanaged, } from './access-grants/unmanaged/index.js';
import { SeamHttpAccessMethods, } from './access-methods/index.js';
import { SeamHttpAccessMethodsUnmanaged, } from './access-methods/unmanaged/index.js';
import { SeamHttpAcsAccessGroups, } from './acs/access-groups/index.js';
import { SeamHttpAcsAccessGroupsUnmanaged, } from './acs/access-groups/unmanaged/index.js';
import { SeamHttpAcsCredentialPools, } from './acs/credential-pools/index.js';
import { SeamHttpAcsCredentialProvisioningAutomations, } from './acs/credential-provisioning-automations/index.js';
import { SeamHttpAcsCredentials, } from './acs/credentials/index.js';
import { SeamHttpAcsCredentialsUnmanaged, } from './acs/credentials/unmanaged/index.js';
import { SeamHttpAcsEncoders, } from './acs/encoders/index.js';
import { SeamHttpAcsEncodersSimulate, } from './acs/encoders/simulate/index.js';
import { SeamHttpAcsEntrances, } from './acs/entrances/index.js';
import { SeamHttpAcsSystems, } from './acs/systems/index.js';
import { SeamHttpAcsUsers, } from './acs/users/index.js';
import { SeamHttpAcsUsersUnmanaged, } from './acs/users/unmanaged/index.js';
import { SeamHttpActionAttempts, } from './action-attempts/index.js';
import { SeamHttpBridges, } from './bridges/index.js';
import { SeamHttpClientSessions, } from './client-sessions/index.js';
import { SeamHttpConnectWebviews, } from './connect-webviews/index.js';
import { SeamHttpConnectedAccounts, } from './connected-accounts/index.js';
import { SeamHttpCustomers, } from './customers/index.js';
import { SeamHttpDevices, } from './devices/index.js';
import { SeamHttpDevicesSimulate, } from './devices/simulate/index.js';
import { SeamHttpDevicesUnmanaged, } from './devices/unmanaged/index.js';
import { SeamHttpEvents, } from './events/index.js';
import { SeamHttpInstantKeys, } from './instant-keys/index.js';
import { SeamHttpLocks, } from './locks/index.js';
import { SeamHttpLocksSimulate, } from './locks/simulate/index.js';
import { SeamHttpNoiseSensors, } from './noise-sensors/index.js';
import { SeamHttpNoiseSensorsNoiseThresholds, } from './noise-sensors/noise-thresholds/index.js';
import { SeamHttpNoiseSensorsSimulate, } from './noise-sensors/simulate/index.js';
import { SeamHttpPhones, } from './phones/index.js';
import { SeamHttpPhonesSimulate, } from './phones/simulate/index.js';
import { SeamHttpSeamConsoleV1, } from './seam/console/v1/index.js';
import { SeamHttpSeamConsoleV1Timelines, } from './seam/console/v1/timelines/index.js';
import { SeamHttpSeamCustomerV1AutomationRuns, } from './seam/customer/v1/automation-runs/index.js';
import { SeamHttpSeamCustomerV1Automations, } from './seam/customer/v1/automations/index.js';
import { SeamHttpSeamCustomerV1Events, } from './seam/customer/v1/events/index.js';
import { SeamHttpSeamCustomerV1Portals, } from './seam/customer/v1/portals/index.js';
import { SeamHttpSeamCustomerV1Reservations, } from './seam/customer/v1/reservations/index.js';
import { SeamHttpSeamCustomerV1Settings, } from './seam/customer/v1/settings/index.js';
import { SeamHttpSeamCustomerV1Spaces, } from './seam/customer/v1/spaces/index.js';
import { SeamHttpSeamPartnerV1BuildingBlocksSpaces, } from './seam/partner/v1/building-blocks/spaces/index.js';
import { SeamHttpSpaces, } from './spaces/index.js';
import { SeamHttpThermostatsDailyPrograms, } from './thermostats/daily-programs/index.js';
import { SeamHttpThermostats, } from './thermostats/index.js';
import { SeamHttpThermostatsSchedules, } from './thermostats/schedules/index.js';
import { SeamHttpThermostatsSimulate, } from './thermostats/simulate/index.js';
import { SeamHttpUnstablePartnerBuildingBlocks, } from './unstable-partner/building-blocks/index.js';
import { SeamHttpUserIdentitiesEnrollmentAutomations, } from './user-identities/enrollment-automations/index.js';
import { SeamHttpUserIdentities, } from './user-identities/index.js';
import { SeamHttpUserIdentitiesUnmanaged, } from './user-identities/unmanaged/index.js';
import { SeamHttpWebhooks, } from './webhooks/index.js';
import { SeamHttpWorkspacesCustomizationProfiles, } from './workspaces/customization-profiles/index.js';
import { SeamHttpWorkspaces, } from './workspaces/index.js';
export class SeamHttpEndpoints {
    client;
    defaults;
    ltsVersion = seamApiLtsVersion;
    static ltsVersion = seamApiLtsVersion;
    constructor(apiKeyOrOptions = {}) {
        const options = parseOptions(apiKeyOrOptions);
        this.client = 'client' in options ? options.client : createClient(options);
        this.defaults = limitToSeamHttpRequestOptions(options);
    }
    static fromClient(client, options = {}) {
        const constructorOptions = { ...options, client };
        if (!isSeamHttpOptionsWithClient(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing client');
        }
        return new SeamHttpEndpoints(constructorOptions);
    }
    static fromApiKey(apiKey, options = {}) {
        const constructorOptions = { ...options, apiKey };
        if (!isSeamHttpOptionsWithApiKey(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing apiKey');
        }
        return new SeamHttpEndpoints(constructorOptions);
    }
    static fromClientSessionToken(clientSessionToken, options = {}) {
        const constructorOptions = { ...options, clientSessionToken };
        if (!isSeamHttpOptionsWithClientSessionToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing clientSessionToken');
        }
        return new SeamHttpEndpoints(constructorOptions);
    }
    static async fromPublishableKey(publishableKey, userIdentifierKey, options = {}) {
        warnOnInsecureuserIdentifierKey(userIdentifierKey);
        const clientOptions = parseOptions({ ...options, publishableKey });
        if (isSeamHttpOptionsWithClient(clientOptions)) {
            throw new SeamHttpInvalidOptionsError('The client option cannot be used with SeamHttpEndpoints.fromPublishableKey');
        }
        const client = createClient(clientOptions);
        const clientSessions = SeamHttpClientSessions.fromClient(client);
        const { token } = await clientSessions.getOrCreate({
            user_identifier_key: userIdentifierKey,
        });
        return SeamHttpEndpoints.fromClientSessionToken(token, options);
    }
    static fromConsoleSessionToken(consoleSessionToken, workspaceId, options = {}) {
        const constructorOptions = { ...options, consoleSessionToken, workspaceId };
        if (!isSeamHttpOptionsWithConsoleSessionToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing consoleSessionToken or workspaceId');
        }
        return new SeamHttpEndpoints(constructorOptions);
    }
    static fromPersonalAccessToken(personalAccessToken, workspaceId, options = {}) {
        const constructorOptions = { ...options, personalAccessToken, workspaceId };
        if (!isSeamHttpOptionsWithPersonalAccessToken(constructorOptions)) {
            throw new SeamHttpInvalidOptionsError('Missing personalAccessToken or workspaceId');
        }
        return new SeamHttpEndpoints(constructorOptions);
    }
    createPaginator(request) {
        return new SeamPaginator(this, request);
    }
    async updateClientSessionToken(clientSessionToken) {
        const { headers } = this.client.defaults;
        const authHeaders = getAuthHeadersForClientSessionToken({
            clientSessionToken,
        });
        for (const key of Object.keys(authHeaders)) {
            if (headers[key] == null) {
                throw new Error('Cannot update a clientSessionToken on a client created without a clientSessionToken');
            }
        }
        this.client.defaults.headers = { ...headers, ...authHeaders };
        const clientSessions = SeamHttpClientSessions.fromClient(this.client);
        await clientSessions.get();
    }
    get '/access_codes/create'() {
        const { client, defaults } = this;
        return function accessCodesCreate(...args) {
            const seam = SeamHttpAccessCodes.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/access_codes/create_multiple'() {
        const { client, defaults } = this;
        return function accessCodesCreateMultiple(...args) {
            const seam = SeamHttpAccessCodes.fromClient(client, defaults);
            return seam.createMultiple(...args);
        };
    }
    get '/access_codes/delete'() {
        const { client, defaults } = this;
        return function accessCodesDelete(...args) {
            const seam = SeamHttpAccessCodes.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/access_codes/generate_code'() {
        const { client, defaults } = this;
        return function accessCodesGenerateCode(...args) {
            const seam = SeamHttpAccessCodes.fromClient(client, defaults);
            return seam.generateCode(...args);
        };
    }
    get '/access_codes/get'() {
        const { client, defaults } = this;
        return function accessCodesGet(...args) {
            const seam = SeamHttpAccessCodes.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/access_codes/list'() {
        const { client, defaults } = this;
        return function accessCodesList(...args) {
            const seam = SeamHttpAccessCodes.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/access_codes/pull_backup_access_code'() {
        const { client, defaults } = this;
        return function accessCodesPullBackupAccessCode(...args) {
            const seam = SeamHttpAccessCodes.fromClient(client, defaults);
            return seam.pullBackupAccessCode(...args);
        };
    }
    get '/access_codes/report_device_constraints'() {
        const { client, defaults } = this;
        return function accessCodesReportDeviceConstraints(...args) {
            const seam = SeamHttpAccessCodes.fromClient(client, defaults);
            return seam.reportDeviceConstraints(...args);
        };
    }
    get '/access_codes/update'() {
        const { client, defaults } = this;
        return function accessCodesUpdate(...args) {
            const seam = SeamHttpAccessCodes.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/access_codes/update_multiple'() {
        const { client, defaults } = this;
        return function accessCodesUpdateMultiple(...args) {
            const seam = SeamHttpAccessCodes.fromClient(client, defaults);
            return seam.updateMultiple(...args);
        };
    }
    get '/access_codes/simulate/create_unmanaged_access_code'() {
        const { client, defaults } = this;
        return function accessCodesSimulateCreateUnmanagedAccessCode(...args) {
            const seam = SeamHttpAccessCodesSimulate.fromClient(client, defaults);
            return seam.createUnmanagedAccessCode(...args);
        };
    }
    get '/access_codes/unmanaged/convert_to_managed'() {
        const { client, defaults } = this;
        return function accessCodesUnmanagedConvertToManaged(...args) {
            const seam = SeamHttpAccessCodesUnmanaged.fromClient(client, defaults);
            return seam.convertToManaged(...args);
        };
    }
    get '/access_codes/unmanaged/delete'() {
        const { client, defaults } = this;
        return function accessCodesUnmanagedDelete(...args) {
            const seam = SeamHttpAccessCodesUnmanaged.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/access_codes/unmanaged/get'() {
        const { client, defaults } = this;
        return function accessCodesUnmanagedGet(...args) {
            const seam = SeamHttpAccessCodesUnmanaged.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/access_codes/unmanaged/list'() {
        const { client, defaults } = this;
        return function accessCodesUnmanagedList(...args) {
            const seam = SeamHttpAccessCodesUnmanaged.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/access_codes/unmanaged/update'() {
        const { client, defaults } = this;
        return function accessCodesUnmanagedUpdate(...args) {
            const seam = SeamHttpAccessCodesUnmanaged.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/access_grants/create'() {
        const { client, defaults } = this;
        return function accessGrantsCreate(...args) {
            const seam = SeamHttpAccessGrants.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/access_grants/delete'() {
        const { client, defaults } = this;
        return function accessGrantsDelete(...args) {
            const seam = SeamHttpAccessGrants.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/access_grants/get'() {
        const { client, defaults } = this;
        return function accessGrantsGet(...args) {
            const seam = SeamHttpAccessGrants.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/access_grants/get_related'() {
        const { client, defaults } = this;
        return function accessGrantsGetRelated(...args) {
            const seam = SeamHttpAccessGrants.fromClient(client, defaults);
            return seam.getRelated(...args);
        };
    }
    get '/access_grants/list'() {
        const { client, defaults } = this;
        return function accessGrantsList(...args) {
            const seam = SeamHttpAccessGrants.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/access_grants/update'() {
        const { client, defaults } = this;
        return function accessGrantsUpdate(...args) {
            const seam = SeamHttpAccessGrants.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/access_grants/unmanaged/get'() {
        const { client, defaults } = this;
        return function accessGrantsUnmanagedGet(...args) {
            const seam = SeamHttpAccessGrantsUnmanaged.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/access_grants/unmanaged/list'() {
        const { client, defaults } = this;
        return function accessGrantsUnmanagedList(...args) {
            const seam = SeamHttpAccessGrantsUnmanaged.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/access_methods/delete'() {
        const { client, defaults } = this;
        return function accessMethodsDelete(...args) {
            const seam = SeamHttpAccessMethods.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/access_methods/encode'() {
        const { client, defaults } = this;
        return function accessMethodsEncode(...args) {
            const seam = SeamHttpAccessMethods.fromClient(client, defaults);
            return seam.encode(...args);
        };
    }
    get '/access_methods/get'() {
        const { client, defaults } = this;
        return function accessMethodsGet(...args) {
            const seam = SeamHttpAccessMethods.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/access_methods/get_related'() {
        const { client, defaults } = this;
        return function accessMethodsGetRelated(...args) {
            const seam = SeamHttpAccessMethods.fromClient(client, defaults);
            return seam.getRelated(...args);
        };
    }
    get '/access_methods/list'() {
        const { client, defaults } = this;
        return function accessMethodsList(...args) {
            const seam = SeamHttpAccessMethods.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/access_methods/unmanaged/get'() {
        const { client, defaults } = this;
        return function accessMethodsUnmanagedGet(...args) {
            const seam = SeamHttpAccessMethodsUnmanaged.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/access_methods/unmanaged/list'() {
        const { client, defaults } = this;
        return function accessMethodsUnmanagedList(...args) {
            const seam = SeamHttpAccessMethodsUnmanaged.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/acs/access_groups/add_user'() {
        const { client, defaults } = this;
        return function acsAccessGroupsAddUser(...args) {
            const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults);
            return seam.addUser(...args);
        };
    }
    get '/acs/access_groups/get'() {
        const { client, defaults } = this;
        return function acsAccessGroupsGet(...args) {
            const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/acs/access_groups/list'() {
        const { client, defaults } = this;
        return function acsAccessGroupsList(...args) {
            const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/acs/access_groups/list_accessible_entrances'() {
        const { client, defaults } = this;
        return function acsAccessGroupsListAccessibleEntrances(...args) {
            const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults);
            return seam.listAccessibleEntrances(...args);
        };
    }
    get '/acs/access_groups/list_users'() {
        const { client, defaults } = this;
        return function acsAccessGroupsListUsers(...args) {
            const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults);
            return seam.listUsers(...args);
        };
    }
    get '/acs/access_groups/remove_user'() {
        const { client, defaults } = this;
        return function acsAccessGroupsRemoveUser(...args) {
            const seam = SeamHttpAcsAccessGroups.fromClient(client, defaults);
            return seam.removeUser(...args);
        };
    }
    get '/acs/access_groups/unmanaged/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function acsAccessGroupsUnmanagedGet(...args) {
            const seam = SeamHttpAcsAccessGroupsUnmanaged.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/acs/access_groups/unmanaged/list'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function acsAccessGroupsUnmanagedList(...args) {
            const seam = SeamHttpAcsAccessGroupsUnmanaged.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/acs/credential_pools/list'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function acsCredentialPoolsList(...args) {
            const seam = SeamHttpAcsCredentialPools.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/acs/credential_provisioning_automations/launch'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function acsCredentialProvisioningAutomationsLaunch(...args) {
            const seam = SeamHttpAcsCredentialProvisioningAutomations.fromClient(client, defaults);
            return seam.launch(...args);
        };
    }
    get '/acs/credentials/assign'() {
        const { client, defaults } = this;
        return function acsCredentialsAssign(...args) {
            const seam = SeamHttpAcsCredentials.fromClient(client, defaults);
            return seam.assign(...args);
        };
    }
    get '/acs/credentials/create'() {
        const { client, defaults } = this;
        return function acsCredentialsCreate(...args) {
            const seam = SeamHttpAcsCredentials.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/acs/credentials/create_offline_code'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function acsCredentialsCreateOfflineCode(...args) {
            const seam = SeamHttpAcsCredentials.fromClient(client, defaults);
            return seam.createOfflineCode(...args);
        };
    }
    get '/acs/credentials/delete'() {
        const { client, defaults } = this;
        return function acsCredentialsDelete(...args) {
            const seam = SeamHttpAcsCredentials.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/acs/credentials/get'() {
        const { client, defaults } = this;
        return function acsCredentialsGet(...args) {
            const seam = SeamHttpAcsCredentials.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/acs/credentials/list'() {
        const { client, defaults } = this;
        return function acsCredentialsList(...args) {
            const seam = SeamHttpAcsCredentials.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/acs/credentials/list_accessible_entrances'() {
        const { client, defaults } = this;
        return function acsCredentialsListAccessibleEntrances(...args) {
            const seam = SeamHttpAcsCredentials.fromClient(client, defaults);
            return seam.listAccessibleEntrances(...args);
        };
    }
    get '/acs/credentials/unassign'() {
        const { client, defaults } = this;
        return function acsCredentialsUnassign(...args) {
            const seam = SeamHttpAcsCredentials.fromClient(client, defaults);
            return seam.unassign(...args);
        };
    }
    get '/acs/credentials/update'() {
        const { client, defaults } = this;
        return function acsCredentialsUpdate(...args) {
            const seam = SeamHttpAcsCredentials.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/acs/credentials/unmanaged/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function acsCredentialsUnmanagedGet(...args) {
            const seam = SeamHttpAcsCredentialsUnmanaged.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/acs/credentials/unmanaged/list'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function acsCredentialsUnmanagedList(...args) {
            const seam = SeamHttpAcsCredentialsUnmanaged.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/acs/encoders/encode_credential'() {
        const { client, defaults } = this;
        return function acsEncodersEncodeCredential(...args) {
            const seam = SeamHttpAcsEncoders.fromClient(client, defaults);
            return seam.encodeCredential(...args);
        };
    }
    get '/acs/encoders/get'() {
        const { client, defaults } = this;
        return function acsEncodersGet(...args) {
            const seam = SeamHttpAcsEncoders.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/acs/encoders/list'() {
        const { client, defaults } = this;
        return function acsEncodersList(...args) {
            const seam = SeamHttpAcsEncoders.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/acs/encoders/scan_credential'() {
        const { client, defaults } = this;
        return function acsEncodersScanCredential(...args) {
            const seam = SeamHttpAcsEncoders.fromClient(client, defaults);
            return seam.scanCredential(...args);
        };
    }
    get '/acs/encoders/simulate/next_credential_encode_will_fail'() {
        const { client, defaults } = this;
        return function acsEncodersSimulateNextCredentialEncodeWillFail(...args) {
            const seam = SeamHttpAcsEncodersSimulate.fromClient(client, defaults);
            return seam.nextCredentialEncodeWillFail(...args);
        };
    }
    get '/acs/encoders/simulate/next_credential_encode_will_succeed'() {
        const { client, defaults } = this;
        return function acsEncodersSimulateNextCredentialEncodeWillSucceed(...args) {
            const seam = SeamHttpAcsEncodersSimulate.fromClient(client, defaults);
            return seam.nextCredentialEncodeWillSucceed(...args);
        };
    }
    get '/acs/encoders/simulate/next_credential_scan_will_fail'() {
        const { client, defaults } = this;
        return function acsEncodersSimulateNextCredentialScanWillFail(...args) {
            const seam = SeamHttpAcsEncodersSimulate.fromClient(client, defaults);
            return seam.nextCredentialScanWillFail(...args);
        };
    }
    get '/acs/encoders/simulate/next_credential_scan_will_succeed'() {
        const { client, defaults } = this;
        return function acsEncodersSimulateNextCredentialScanWillSucceed(...args) {
            const seam = SeamHttpAcsEncodersSimulate.fromClient(client, defaults);
            return seam.nextCredentialScanWillSucceed(...args);
        };
    }
    get '/acs/entrances/get'() {
        const { client, defaults } = this;
        return function acsEntrancesGet(...args) {
            const seam = SeamHttpAcsEntrances.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/acs/entrances/grant_access'() {
        const { client, defaults } = this;
        return function acsEntrancesGrantAccess(...args) {
            const seam = SeamHttpAcsEntrances.fromClient(client, defaults);
            return seam.grantAccess(...args);
        };
    }
    get '/acs/entrances/list'() {
        const { client, defaults } = this;
        return function acsEntrancesList(...args) {
            const seam = SeamHttpAcsEntrances.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/acs/entrances/list_credentials_with_access'() {
        const { client, defaults } = this;
        return function acsEntrancesListCredentialsWithAccess(...args) {
            const seam = SeamHttpAcsEntrances.fromClient(client, defaults);
            return seam.listCredentialsWithAccess(...args);
        };
    }
    get '/acs/systems/get'() {
        const { client, defaults } = this;
        return function acsSystemsGet(...args) {
            const seam = SeamHttpAcsSystems.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/acs/systems/list'() {
        const { client, defaults } = this;
        return function acsSystemsList(...args) {
            const seam = SeamHttpAcsSystems.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/acs/systems/list_compatible_credential_manager_acs_systems'() {
        const { client, defaults } = this;
        return function acsSystemsListCompatibleCredentialManagerAcsSystems(...args) {
            const seam = SeamHttpAcsSystems.fromClient(client, defaults);
            return seam.listCompatibleCredentialManagerAcsSystems(...args);
        };
    }
    get '/acs/users/add_to_access_group'() {
        const { client, defaults } = this;
        return function acsUsersAddToAccessGroup(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.addToAccessGroup(...args);
        };
    }
    get '/acs/users/create'() {
        const { client, defaults } = this;
        return function acsUsersCreate(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/acs/users/delete'() {
        const { client, defaults } = this;
        return function acsUsersDelete(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/acs/users/get'() {
        const { client, defaults } = this;
        return function acsUsersGet(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/acs/users/list'() {
        const { client, defaults } = this;
        return function acsUsersList(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/acs/users/list_accessible_entrances'() {
        const { client, defaults } = this;
        return function acsUsersListAccessibleEntrances(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.listAccessibleEntrances(...args);
        };
    }
    get '/acs/users/remove_from_access_group'() {
        const { client, defaults } = this;
        return function acsUsersRemoveFromAccessGroup(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.removeFromAccessGroup(...args);
        };
    }
    get '/acs/users/revoke_access_to_all_entrances'() {
        const { client, defaults } = this;
        return function acsUsersRevokeAccessToAllEntrances(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.revokeAccessToAllEntrances(...args);
        };
    }
    get '/acs/users/suspend'() {
        const { client, defaults } = this;
        return function acsUsersSuspend(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.suspend(...args);
        };
    }
    get '/acs/users/unsuspend'() {
        const { client, defaults } = this;
        return function acsUsersUnsuspend(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.unsuspend(...args);
        };
    }
    get '/acs/users/update'() {
        const { client, defaults } = this;
        return function acsUsersUpdate(...args) {
            const seam = SeamHttpAcsUsers.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/acs/users/unmanaged/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function acsUsersUnmanagedGet(...args) {
            const seam = SeamHttpAcsUsersUnmanaged.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/acs/users/unmanaged/list'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function acsUsersUnmanagedList(...args) {
            const seam = SeamHttpAcsUsersUnmanaged.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/action_attempts/get'() {
        const { client, defaults } = this;
        return function actionAttemptsGet(...args) {
            const seam = SeamHttpActionAttempts.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/action_attempts/list'() {
        const { client, defaults } = this;
        return function actionAttemptsList(...args) {
            const seam = SeamHttpActionAttempts.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/bridges/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function bridgesGet(...args) {
            const seam = SeamHttpBridges.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/bridges/list'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function bridgesList(...args) {
            const seam = SeamHttpBridges.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/client_sessions/create'() {
        const { client, defaults } = this;
        return function clientSessionsCreate(...args) {
            const seam = SeamHttpClientSessions.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/client_sessions/delete'() {
        const { client, defaults } = this;
        return function clientSessionsDelete(...args) {
            const seam = SeamHttpClientSessions.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/client_sessions/get'() {
        const { client, defaults } = this;
        return function clientSessionsGet(...args) {
            const seam = SeamHttpClientSessions.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/client_sessions/get_or_create'() {
        const { client, defaults } = this;
        return function clientSessionsGetOrCreate(...args) {
            const seam = SeamHttpClientSessions.fromClient(client, defaults);
            return seam.getOrCreate(...args);
        };
    }
    get '/client_sessions/grant_access'() {
        const { client, defaults } = this;
        return function clientSessionsGrantAccess(...args) {
            const seam = SeamHttpClientSessions.fromClient(client, defaults);
            return seam.grantAccess(...args);
        };
    }
    get '/client_sessions/list'() {
        const { client, defaults } = this;
        return function clientSessionsList(...args) {
            const seam = SeamHttpClientSessions.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/client_sessions/revoke'() {
        const { client, defaults } = this;
        return function clientSessionsRevoke(...args) {
            const seam = SeamHttpClientSessions.fromClient(client, defaults);
            return seam.revoke(...args);
        };
    }
    get '/connect_webviews/create'() {
        const { client, defaults } = this;
        return function connectWebviewsCreate(...args) {
            const seam = SeamHttpConnectWebviews.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/connect_webviews/delete'() {
        const { client, defaults } = this;
        return function connectWebviewsDelete(...args) {
            const seam = SeamHttpConnectWebviews.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/connect_webviews/get'() {
        const { client, defaults } = this;
        return function connectWebviewsGet(...args) {
            const seam = SeamHttpConnectWebviews.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/connect_webviews/list'() {
        const { client, defaults } = this;
        return function connectWebviewsList(...args) {
            const seam = SeamHttpConnectWebviews.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/connected_accounts/delete'() {
        const { client, defaults } = this;
        return function connectedAccountsDelete(...args) {
            const seam = SeamHttpConnectedAccounts.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/connected_accounts/get'() {
        const { client, defaults } = this;
        return function connectedAccountsGet(...args) {
            const seam = SeamHttpConnectedAccounts.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/connected_accounts/list'() {
        const { client, defaults } = this;
        return function connectedAccountsList(...args) {
            const seam = SeamHttpConnectedAccounts.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/connected_accounts/sync'() {
        const { client, defaults } = this;
        return function connectedAccountsSync(...args) {
            const seam = SeamHttpConnectedAccounts.fromClient(client, defaults);
            return seam.sync(...args);
        };
    }
    get '/connected_accounts/update'() {
        const { client, defaults } = this;
        return function connectedAccountsUpdate(...args) {
            const seam = SeamHttpConnectedAccounts.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/customers/create_portal'() {
        const { client, defaults } = this;
        return function customersCreatePortal(...args) {
            const seam = SeamHttpCustomers.fromClient(client, defaults);
            return seam.createPortal(...args);
        };
    }
    get '/customers/delete_data'() {
        const { client, defaults } = this;
        return function customersDeleteData(...args) {
            const seam = SeamHttpCustomers.fromClient(client, defaults);
            return seam.deleteData(...args);
        };
    }
    get '/customers/push_data'() {
        const { client, defaults } = this;
        return function customersPushData(...args) {
            const seam = SeamHttpCustomers.fromClient(client, defaults);
            return seam.pushData(...args);
        };
    }
    get '/devices/delete'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function devicesDelete(...args) {
            const seam = SeamHttpDevices.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/devices/get'() {
        const { client, defaults } = this;
        return function devicesGet(...args) {
            const seam = SeamHttpDevices.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/devices/list'() {
        const { client, defaults } = this;
        return function devicesList(...args) {
            const seam = SeamHttpDevices.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/devices/list_device_providers'() {
        const { client, defaults } = this;
        return function devicesListDeviceProviders(...args) {
            const seam = SeamHttpDevices.fromClient(client, defaults);
            return seam.listDeviceProviders(...args);
        };
    }
    get '/devices/update'() {
        const { client, defaults } = this;
        return function devicesUpdate(...args) {
            const seam = SeamHttpDevices.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/devices/simulate/connect'() {
        const { client, defaults } = this;
        return function devicesSimulateConnect(...args) {
            const seam = SeamHttpDevicesSimulate.fromClient(client, defaults);
            return seam.connect(...args);
        };
    }
    get '/devices/simulate/connect_to_hub'() {
        const { client, defaults } = this;
        return function devicesSimulateConnectToHub(...args) {
            const seam = SeamHttpDevicesSimulate.fromClient(client, defaults);
            return seam.connectToHub(...args);
        };
    }
    get '/devices/simulate/disconnect'() {
        const { client, defaults } = this;
        return function devicesSimulateDisconnect(...args) {
            const seam = SeamHttpDevicesSimulate.fromClient(client, defaults);
            return seam.disconnect(...args);
        };
    }
    get '/devices/simulate/disconnect_from_hub'() {
        const { client, defaults } = this;
        return function devicesSimulateDisconnectFromHub(...args) {
            const seam = SeamHttpDevicesSimulate.fromClient(client, defaults);
            return seam.disconnectFromHub(...args);
        };
    }
    get '/devices/simulate/paid_subscription'() {
        const { client, defaults } = this;
        return function devicesSimulatePaidSubscription(...args) {
            const seam = SeamHttpDevicesSimulate.fromClient(client, defaults);
            return seam.paidSubscription(...args);
        };
    }
    get '/devices/simulate/remove'() {
        const { client, defaults } = this;
        return function devicesSimulateRemove(...args) {
            const seam = SeamHttpDevicesSimulate.fromClient(client, defaults);
            return seam.remove(...args);
        };
    }
    get '/devices/unmanaged/get'() {
        const { client, defaults } = this;
        return function devicesUnmanagedGet(...args) {
            const seam = SeamHttpDevicesUnmanaged.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/devices/unmanaged/list'() {
        const { client, defaults } = this;
        return function devicesUnmanagedList(...args) {
            const seam = SeamHttpDevicesUnmanaged.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/devices/unmanaged/update'() {
        const { client, defaults } = this;
        return function devicesUnmanagedUpdate(...args) {
            const seam = SeamHttpDevicesUnmanaged.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/events/get'() {
        const { client, defaults } = this;
        return function eventsGet(...args) {
            const seam = SeamHttpEvents.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/events/list'() {
        const { client, defaults } = this;
        return function eventsList(...args) {
            const seam = SeamHttpEvents.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/instant_keys/delete'() {
        const { client, defaults } = this;
        return function instantKeysDelete(...args) {
            const seam = SeamHttpInstantKeys.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/instant_keys/get'() {
        const { client, defaults } = this;
        return function instantKeysGet(...args) {
            const seam = SeamHttpInstantKeys.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/instant_keys/list'() {
        const { client, defaults } = this;
        return function instantKeysList(...args) {
            const seam = SeamHttpInstantKeys.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/locks/get'() {
        const { client, defaults } = this;
        return function locksGet(...args) {
            const seam = SeamHttpLocks.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/locks/list'() {
        const { client, defaults } = this;
        return function locksList(...args) {
            const seam = SeamHttpLocks.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/locks/lock_door'() {
        const { client, defaults } = this;
        return function locksLockDoor(...args) {
            const seam = SeamHttpLocks.fromClient(client, defaults);
            return seam.lockDoor(...args);
        };
    }
    get '/locks/unlock_door'() {
        const { client, defaults } = this;
        return function locksUnlockDoor(...args) {
            const seam = SeamHttpLocks.fromClient(client, defaults);
            return seam.unlockDoor(...args);
        };
    }
    get '/locks/simulate/keypad_code_entry'() {
        const { client, defaults } = this;
        return function locksSimulateKeypadCodeEntry(...args) {
            const seam = SeamHttpLocksSimulate.fromClient(client, defaults);
            return seam.keypadCodeEntry(...args);
        };
    }
    get '/locks/simulate/manual_lock_via_keypad'() {
        const { client, defaults } = this;
        return function locksSimulateManualLockViaKeypad(...args) {
            const seam = SeamHttpLocksSimulate.fromClient(client, defaults);
            return seam.manualLockViaKeypad(...args);
        };
    }
    get '/noise_sensors/list'() {
        const { client, defaults } = this;
        return function noiseSensorsList(...args) {
            const seam = SeamHttpNoiseSensors.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/noise_sensors/noise_thresholds/create'() {
        const { client, defaults } = this;
        return function noiseSensorsNoiseThresholdsCreate(...args) {
            const seam = SeamHttpNoiseSensorsNoiseThresholds.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/noise_sensors/noise_thresholds/delete'() {
        const { client, defaults } = this;
        return function noiseSensorsNoiseThresholdsDelete(...args) {
            const seam = SeamHttpNoiseSensorsNoiseThresholds.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/noise_sensors/noise_thresholds/get'() {
        const { client, defaults } = this;
        return function noiseSensorsNoiseThresholdsGet(...args) {
            const seam = SeamHttpNoiseSensorsNoiseThresholds.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/noise_sensors/noise_thresholds/list'() {
        const { client, defaults } = this;
        return function noiseSensorsNoiseThresholdsList(...args) {
            const seam = SeamHttpNoiseSensorsNoiseThresholds.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/noise_sensors/noise_thresholds/update'() {
        const { client, defaults } = this;
        return function noiseSensorsNoiseThresholdsUpdate(...args) {
            const seam = SeamHttpNoiseSensorsNoiseThresholds.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/noise_sensors/simulate/trigger_noise_threshold'() {
        const { client, defaults } = this;
        return function noiseSensorsSimulateTriggerNoiseThreshold(...args) {
            const seam = SeamHttpNoiseSensorsSimulate.fromClient(client, defaults);
            return seam.triggerNoiseThreshold(...args);
        };
    }
    get '/phones/deactivate'() {
        const { client, defaults } = this;
        return function phonesDeactivate(...args) {
            const seam = SeamHttpPhones.fromClient(client, defaults);
            return seam.deactivate(...args);
        };
    }
    get '/phones/get'() {
        const { client, defaults } = this;
        return function phonesGet(...args) {
            const seam = SeamHttpPhones.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/phones/list'() {
        const { client, defaults } = this;
        return function phonesList(...args) {
            const seam = SeamHttpPhones.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/phones/simulate/create_sandbox_phone'() {
        const { client, defaults } = this;
        return function phonesSimulateCreateSandboxPhone(...args) {
            const seam = SeamHttpPhonesSimulate.fromClient(client, defaults);
            return seam.createSandboxPhone(...args);
        };
    }
    get '/seam/console/v1/get_resource_locator'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamConsoleV1GetResourceLocator(...args) {
            const seam = SeamHttpSeamConsoleV1.fromClient(client, defaults);
            return seam.getResourceLocator(...args);
        };
    }
    get '/seam/console/v1/timelines/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamConsoleV1TimelinesGet(...args) {
            const seam = SeamHttpSeamConsoleV1Timelines.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/seam/customer/v1/automation_runs/list'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamCustomerV1AutomationRunsList(...args) {
            const seam = SeamHttpSeamCustomerV1AutomationRuns.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/seam/customer/v1/automations/delete'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamCustomerV1AutomationsDelete(...args) {
            const seam = SeamHttpSeamCustomerV1Automations.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/seam/customer/v1/automations/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamCustomerV1AutomationsGet(...args) {
            const seam = SeamHttpSeamCustomerV1Automations.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/seam/customer/v1/automations/update'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamCustomerV1AutomationsUpdate(...args) {
            const seam = SeamHttpSeamCustomerV1Automations.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/seam/customer/v1/events/list'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamCustomerV1EventsList(...args) {
            const seam = SeamHttpSeamCustomerV1Events.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/seam/customer/v1/portals/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamCustomerV1PortalsGet(...args) {
            const seam = SeamHttpSeamCustomerV1Portals.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/seam/customer/v1/reservations/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamCustomerV1ReservationsGet(...args) {
            const seam = SeamHttpSeamCustomerV1Reservations.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/seam/customer/v1/reservations/list'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamCustomerV1ReservationsList(...args) {
            const seam = SeamHttpSeamCustomerV1Reservations.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/seam/customer/v1/settings/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamCustomerV1SettingsGet(...args) {
            const seam = SeamHttpSeamCustomerV1Settings.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/seam/customer/v1/settings/update'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamCustomerV1SettingsUpdate(...args) {
            const seam = SeamHttpSeamCustomerV1Settings.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/seam/customer/v1/spaces/create'() {
        const { client, defaults } = this;
        return function seamCustomerV1SpacesCreate(...args) {
            const seam = SeamHttpSeamCustomerV1Spaces.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/seam/customer/v1/spaces/list'() {
        const { client, defaults } = this;
        return function seamCustomerV1SpacesList(...args) {
            const seam = SeamHttpSeamCustomerV1Spaces.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/seam/partner/v1/building_blocks/spaces/auto_map'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function seamPartnerV1BuildingBlocksSpacesAutoMap(...args) {
            const seam = SeamHttpSeamPartnerV1BuildingBlocksSpaces.fromClient(client, defaults);
            return seam.autoMap(...args);
        };
    }
    get '/spaces/add_acs_entrances'() {
        const { client, defaults } = this;
        return function spacesAddAcsEntrances(...args) {
            const seam = SeamHttpSpaces.fromClient(client, defaults);
            return seam.addAcsEntrances(...args);
        };
    }
    get '/spaces/add_devices'() {
        const { client, defaults } = this;
        return function spacesAddDevices(...args) {
            const seam = SeamHttpSpaces.fromClient(client, defaults);
            return seam.addDevices(...args);
        };
    }
    get '/spaces/create'() {
        const { client, defaults } = this;
        return function spacesCreate(...args) {
            const seam = SeamHttpSpaces.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/spaces/delete'() {
        const { client, defaults } = this;
        return function spacesDelete(...args) {
            const seam = SeamHttpSpaces.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/spaces/get'() {
        const { client, defaults } = this;
        return function spacesGet(...args) {
            const seam = SeamHttpSpaces.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/spaces/get_related'() {
        const { client, defaults } = this;
        return function spacesGetRelated(...args) {
            const seam = SeamHttpSpaces.fromClient(client, defaults);
            return seam.getRelated(...args);
        };
    }
    get '/spaces/list'() {
        const { client, defaults } = this;
        return function spacesList(...args) {
            const seam = SeamHttpSpaces.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/spaces/remove_acs_entrances'() {
        const { client, defaults } = this;
        return function spacesRemoveAcsEntrances(...args) {
            const seam = SeamHttpSpaces.fromClient(client, defaults);
            return seam.removeAcsEntrances(...args);
        };
    }
    get '/spaces/remove_devices'() {
        const { client, defaults } = this;
        return function spacesRemoveDevices(...args) {
            const seam = SeamHttpSpaces.fromClient(client, defaults);
            return seam.removeDevices(...args);
        };
    }
    get '/spaces/update'() {
        const { client, defaults } = this;
        return function spacesUpdate(...args) {
            const seam = SeamHttpSpaces.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/thermostats/activate_climate_preset'() {
        const { client, defaults } = this;
        return function thermostatsActivateClimatePreset(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.activateClimatePreset(...args);
        };
    }
    get '/thermostats/cool'() {
        const { client, defaults } = this;
        return function thermostatsCool(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.cool(...args);
        };
    }
    get '/thermostats/create_climate_preset'() {
        const { client, defaults } = this;
        return function thermostatsCreateClimatePreset(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.createClimatePreset(...args);
        };
    }
    get '/thermostats/delete_climate_preset'() {
        const { client, defaults } = this;
        return function thermostatsDeleteClimatePreset(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.deleteClimatePreset(...args);
        };
    }
    get '/thermostats/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function thermostatsGet(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/thermostats/heat'() {
        const { client, defaults } = this;
        return function thermostatsHeat(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.heat(...args);
        };
    }
    get '/thermostats/heat_cool'() {
        const { client, defaults } = this;
        return function thermostatsHeatCool(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.heatCool(...args);
        };
    }
    get '/thermostats/list'() {
        const { client, defaults } = this;
        return function thermostatsList(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/thermostats/off'() {
        const { client, defaults } = this;
        return function thermostatsOff(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.off(...args);
        };
    }
    get '/thermostats/set_fallback_climate_preset'() {
        const { client, defaults } = this;
        return function thermostatsSetFallbackClimatePreset(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.setFallbackClimatePreset(...args);
        };
    }
    get '/thermostats/set_fan_mode'() {
        const { client, defaults } = this;
        return function thermostatsSetFanMode(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.setFanMode(...args);
        };
    }
    get '/thermostats/set_hvac_mode'() {
        const { client, defaults } = this;
        return function thermostatsSetHvacMode(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.setHvacMode(...args);
        };
    }
    get '/thermostats/set_temperature_threshold'() {
        const { client, defaults } = this;
        return function thermostatsSetTemperatureThreshold(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.setTemperatureThreshold(...args);
        };
    }
    get '/thermostats/update_climate_preset'() {
        const { client, defaults } = this;
        return function thermostatsUpdateClimatePreset(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.updateClimatePreset(...args);
        };
    }
    get '/thermostats/update_weekly_program'() {
        const { client, defaults } = this;
        return function thermostatsUpdateWeeklyProgram(...args) {
            const seam = SeamHttpThermostats.fromClient(client, defaults);
            return seam.updateWeeklyProgram(...args);
        };
    }
    get '/thermostats/daily_programs/create'() {
        const { client, defaults } = this;
        return function thermostatsDailyProgramsCreate(...args) {
            const seam = SeamHttpThermostatsDailyPrograms.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/thermostats/daily_programs/delete'() {
        const { client, defaults } = this;
        return function thermostatsDailyProgramsDelete(...args) {
            const seam = SeamHttpThermostatsDailyPrograms.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/thermostats/daily_programs/update'() {
        const { client, defaults } = this;
        return function thermostatsDailyProgramsUpdate(...args) {
            const seam = SeamHttpThermostatsDailyPrograms.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/thermostats/schedules/create'() {
        const { client, defaults } = this;
        return function thermostatsSchedulesCreate(...args) {
            const seam = SeamHttpThermostatsSchedules.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/thermostats/schedules/delete'() {
        const { client, defaults } = this;
        return function thermostatsSchedulesDelete(...args) {
            const seam = SeamHttpThermostatsSchedules.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/thermostats/schedules/get'() {
        const { client, defaults } = this;
        return function thermostatsSchedulesGet(...args) {
            const seam = SeamHttpThermostatsSchedules.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/thermostats/schedules/list'() {
        const { client, defaults } = this;
        return function thermostatsSchedulesList(...args) {
            const seam = SeamHttpThermostatsSchedules.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/thermostats/schedules/update'() {
        const { client, defaults } = this;
        return function thermostatsSchedulesUpdate(...args) {
            const seam = SeamHttpThermostatsSchedules.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/thermostats/simulate/hvac_mode_adjusted'() {
        const { client, defaults } = this;
        return function thermostatsSimulateHvacModeAdjusted(...args) {
            const seam = SeamHttpThermostatsSimulate.fromClient(client, defaults);
            return seam.hvacModeAdjusted(...args);
        };
    }
    get '/thermostats/simulate/temperature_reached'() {
        const { client, defaults } = this;
        return function thermostatsSimulateTemperatureReached(...args) {
            const seam = SeamHttpThermostatsSimulate.fromClient(client, defaults);
            return seam.temperatureReached(...args);
        };
    }
    get '/unstable_partner/building_blocks/connect_accounts'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function unstablePartnerBuildingBlocksConnectAccounts(...args) {
            const seam = SeamHttpUnstablePartnerBuildingBlocks.fromClient(client, defaults);
            return seam.connectAccounts(...args);
        };
    }
    get '/unstable_partner/building_blocks/generate_magic_link'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function unstablePartnerBuildingBlocksGenerateMagicLink(...args) {
            const seam = SeamHttpUnstablePartnerBuildingBlocks.fromClient(client, defaults);
            return seam.generateMagicLink(...args);
        };
    }
    get '/unstable_partner/building_blocks/manage_devices'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function unstablePartnerBuildingBlocksManageDevices(...args) {
            const seam = SeamHttpUnstablePartnerBuildingBlocks.fromClient(client, defaults);
            return seam.manageDevices(...args);
        };
    }
    get '/unstable_partner/building_blocks/organize_spaces'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function unstablePartnerBuildingBlocksOrganizeSpaces(...args) {
            const seam = SeamHttpUnstablePartnerBuildingBlocks.fromClient(client, defaults);
            return seam.organizeSpaces(...args);
        };
    }
    get '/user_identities/add_acs_user'() {
        const { client, defaults } = this;
        return function userIdentitiesAddAcsUser(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.addAcsUser(...args);
        };
    }
    get '/user_identities/create'() {
        const { client, defaults } = this;
        return function userIdentitiesCreate(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/user_identities/delete'() {
        const { client, defaults } = this;
        return function userIdentitiesDelete(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/user_identities/generate_instant_key'() {
        const { client, defaults } = this;
        return function userIdentitiesGenerateInstantKey(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.generateInstantKey(...args);
        };
    }
    get '/user_identities/get'() {
        const { client, defaults } = this;
        return function userIdentitiesGet(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/user_identities/grant_access_to_device'() {
        const { client, defaults } = this;
        return function userIdentitiesGrantAccessToDevice(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.grantAccessToDevice(...args);
        };
    }
    get '/user_identities/list'() {
        const { client, defaults } = this;
        return function userIdentitiesList(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/user_identities/list_accessible_devices'() {
        const { client, defaults } = this;
        return function userIdentitiesListAccessibleDevices(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.listAccessibleDevices(...args);
        };
    }
    get '/user_identities/list_acs_systems'() {
        const { client, defaults } = this;
        return function userIdentitiesListAcsSystems(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.listAcsSystems(...args);
        };
    }
    get '/user_identities/list_acs_users'() {
        const { client, defaults } = this;
        return function userIdentitiesListAcsUsers(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.listAcsUsers(...args);
        };
    }
    get '/user_identities/remove_acs_user'() {
        const { client, defaults } = this;
        return function userIdentitiesRemoveAcsUser(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.removeAcsUser(...args);
        };
    }
    get '/user_identities/revoke_access_to_device'() {
        const { client, defaults } = this;
        return function userIdentitiesRevokeAccessToDevice(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.revokeAccessToDevice(...args);
        };
    }
    get '/user_identities/update'() {
        const { client, defaults } = this;
        return function userIdentitiesUpdate(...args) {
            const seam = SeamHttpUserIdentities.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/user_identities/enrollment_automations/delete'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function userIdentitiesEnrollmentAutomationsDelete(...args) {
            const seam = SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/user_identities/enrollment_automations/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function userIdentitiesEnrollmentAutomationsGet(...args) {
            const seam = SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/user_identities/enrollment_automations/launch'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function userIdentitiesEnrollmentAutomationsLaunch(...args) {
            const seam = SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(client, defaults);
            return seam.launch(...args);
        };
    }
    get '/user_identities/enrollment_automations/list'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function userIdentitiesEnrollmentAutomationsList(...args) {
            const seam = SeamHttpUserIdentitiesEnrollmentAutomations.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/user_identities/unmanaged/get'() {
        const { client, defaults } = this;
        return function userIdentitiesUnmanagedGet(...args) {
            const seam = SeamHttpUserIdentitiesUnmanaged.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/user_identities/unmanaged/list'() {
        const { client, defaults } = this;
        return function userIdentitiesUnmanagedList(...args) {
            const seam = SeamHttpUserIdentitiesUnmanaged.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/webhooks/create'() {
        const { client, defaults } = this;
        return function webhooksCreate(...args) {
            const seam = SeamHttpWebhooks.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/webhooks/delete'() {
        const { client, defaults } = this;
        return function webhooksDelete(...args) {
            const seam = SeamHttpWebhooks.fromClient(client, defaults);
            return seam.delete(...args);
        };
    }
    get '/webhooks/get'() {
        const { client, defaults } = this;
        return function webhooksGet(...args) {
            const seam = SeamHttpWebhooks.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/webhooks/list'() {
        const { client, defaults } = this;
        return function webhooksList(...args) {
            const seam = SeamHttpWebhooks.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/webhooks/update'() {
        const { client, defaults } = this;
        return function webhooksUpdate(...args) {
            const seam = SeamHttpWebhooks.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/workspaces/create'() {
        const { client, defaults } = this;
        return function workspacesCreate(...args) {
            const seam = SeamHttpWorkspaces.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/workspaces/find_anything'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function workspacesFindAnything(...args) {
            const seam = SeamHttpWorkspaces.fromClient(client, defaults);
            return seam.findAnything(...args);
        };
    }
    get '/workspaces/get'() {
        const { client, defaults } = this;
        return function workspacesGet(...args) {
            const seam = SeamHttpWorkspaces.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/workspaces/list'() {
        const { client, defaults } = this;
        return function workspacesList(...args) {
            const seam = SeamHttpWorkspaces.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/workspaces/reset_sandbox'() {
        const { client, defaults } = this;
        return function workspacesResetSandbox(...args) {
            const seam = SeamHttpWorkspaces.fromClient(client, defaults);
            return seam.resetSandbox(...args);
        };
    }
    get '/workspaces/update'() {
        const { client, defaults } = this;
        return function workspacesUpdate(...args) {
            const seam = SeamHttpWorkspaces.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/workspaces/customization_profiles/create'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function workspacesCustomizationProfilesCreate(...args) {
            const seam = SeamHttpWorkspacesCustomizationProfiles.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/workspaces/customization_profiles/get'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function workspacesCustomizationProfilesGet(...args) {
            const seam = SeamHttpWorkspacesCustomizationProfiles.fromClient(client, defaults);
            return seam.get(...args);
        };
    }
    get '/workspaces/customization_profiles/list'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function workspacesCustomizationProfilesList(...args) {
            const seam = SeamHttpWorkspacesCustomizationProfiles.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
    get '/workspaces/customization_profiles/update'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function workspacesCustomizationProfilesUpdate(...args) {
            const seam = SeamHttpWorkspacesCustomizationProfiles.fromClient(client, defaults);
            return seam.update(...args);
        };
    }
    get '/workspaces/customization_profiles/upload_images'() {
        const { client, defaults } = this;
        if (!this.defaults.isUndocumentedApiEnabled) {
            throw new Error('Cannot use undocumented API without isUndocumentedApiEnabled');
        }
        return function workspacesCustomizationProfilesUploadImages(...args) {
            const seam = SeamHttpWorkspacesCustomizationProfiles.fromClient(client, defaults);
            return seam.uploadImages(...args);
        };
    }
}
//# sourceMappingURL=seam-http-endpoints.js.map