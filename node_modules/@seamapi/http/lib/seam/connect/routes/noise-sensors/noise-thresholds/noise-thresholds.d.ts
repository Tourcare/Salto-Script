import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpNoiseSensorsNoiseThresholds {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpNoiseSensorsNoiseThresholds;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpNoiseSensorsNoiseThresholds;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpNoiseSensorsNoiseThresholds;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpNoiseSensorsNoiseThresholds>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpNoiseSensorsNoiseThresholds;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpNoiseSensorsNoiseThresholds;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    create(parameters?: NoiseSensorsNoiseThresholdsCreateParameters, options?: NoiseSensorsNoiseThresholdsCreateOptions): NoiseSensorsNoiseThresholdsCreateRequest;
    delete(parameters?: NoiseSensorsNoiseThresholdsDeleteParameters, options?: NoiseSensorsNoiseThresholdsDeleteOptions): NoiseSensorsNoiseThresholdsDeleteRequest;
    get(parameters?: NoiseSensorsNoiseThresholdsGetParameters, options?: NoiseSensorsNoiseThresholdsGetOptions): NoiseSensorsNoiseThresholdsGetRequest;
    list(parameters?: NoiseSensorsNoiseThresholdsListParameters, options?: NoiseSensorsNoiseThresholdsListOptions): NoiseSensorsNoiseThresholdsListRequest;
    update(parameters?: NoiseSensorsNoiseThresholdsUpdateParameters, options?: NoiseSensorsNoiseThresholdsUpdateOptions): NoiseSensorsNoiseThresholdsUpdateRequest;
}
export type NoiseSensorsNoiseThresholdsCreateParameters = RouteRequestBody<'/noise_sensors/noise_thresholds/create'>;
/**
 * @deprecated Use NoiseSensorsNoiseThresholdsCreateParameters instead.
 */
export type NoiseSensorsNoiseThresholdsCreateBody = NoiseSensorsNoiseThresholdsCreateParameters;
/**
 * @deprecated Use NoiseSensorsNoiseThresholdsCreateRequest instead.
 */
export type NoiseSensorsNoiseThresholdsCreateResponse = SetNonNullable<Required<RouteResponse<'/noise_sensors/noise_thresholds/create'>>>;
export type NoiseSensorsNoiseThresholdsCreateRequest = SeamHttpRequest<NoiseSensorsNoiseThresholdsCreateResponse, 'noise_threshold'>;
export interface NoiseSensorsNoiseThresholdsCreateOptions {
}
export type NoiseSensorsNoiseThresholdsDeleteParameters = RouteRequestBody<'/noise_sensors/noise_thresholds/delete'>;
/**
 * @deprecated Use NoiseSensorsNoiseThresholdsDeleteParameters instead.
 */
export type NoiseSensorsNoiseThresholdsDeleteParams = NoiseSensorsNoiseThresholdsDeleteParameters;
/**
 * @deprecated Use NoiseSensorsNoiseThresholdsDeleteRequest instead.
 */
export type NoiseSensorsNoiseThresholdsDeleteResponse = SetNonNullable<Required<RouteResponse<'/noise_sensors/noise_thresholds/delete'>>>;
export type NoiseSensorsNoiseThresholdsDeleteRequest = SeamHttpRequest<void, undefined>;
export interface NoiseSensorsNoiseThresholdsDeleteOptions {
}
export type NoiseSensorsNoiseThresholdsGetParameters = RouteRequestBody<'/noise_sensors/noise_thresholds/get'>;
/**
 * @deprecated Use NoiseSensorsNoiseThresholdsGetParameters instead.
 */
export type NoiseSensorsNoiseThresholdsGetParams = NoiseSensorsNoiseThresholdsGetParameters;
/**
 * @deprecated Use NoiseSensorsNoiseThresholdsGetRequest instead.
 */
export type NoiseSensorsNoiseThresholdsGetResponse = SetNonNullable<Required<RouteResponse<'/noise_sensors/noise_thresholds/get'>>>;
export type NoiseSensorsNoiseThresholdsGetRequest = SeamHttpRequest<NoiseSensorsNoiseThresholdsGetResponse, 'noise_threshold'>;
export interface NoiseSensorsNoiseThresholdsGetOptions {
}
export type NoiseSensorsNoiseThresholdsListParameters = RouteRequestBody<'/noise_sensors/noise_thresholds/list'>;
/**
 * @deprecated Use NoiseSensorsNoiseThresholdsListParameters instead.
 */
export type NoiseSensorsNoiseThresholdsListParams = NoiseSensorsNoiseThresholdsListParameters;
/**
 * @deprecated Use NoiseSensorsNoiseThresholdsListRequest instead.
 */
export type NoiseSensorsNoiseThresholdsListResponse = SetNonNullable<Required<RouteResponse<'/noise_sensors/noise_thresholds/list'>>>;
export type NoiseSensorsNoiseThresholdsListRequest = SeamHttpRequest<NoiseSensorsNoiseThresholdsListResponse, 'noise_thresholds'>;
export interface NoiseSensorsNoiseThresholdsListOptions {
}
export type NoiseSensorsNoiseThresholdsUpdateParameters = RouteRequestBody<'/noise_sensors/noise_thresholds/update'>;
/**
 * @deprecated Use NoiseSensorsNoiseThresholdsUpdateParameters instead.
 */
export type NoiseSensorsNoiseThresholdsUpdateBody = NoiseSensorsNoiseThresholdsUpdateParameters;
/**
 * @deprecated Use NoiseSensorsNoiseThresholdsUpdateRequest instead.
 */
export type NoiseSensorsNoiseThresholdsUpdateResponse = SetNonNullable<Required<RouteResponse<'/noise_sensors/noise_thresholds/update'>>>;
export type NoiseSensorsNoiseThresholdsUpdateRequest = SeamHttpRequest<void, undefined>;
export interface NoiseSensorsNoiseThresholdsUpdateOptions {
}
