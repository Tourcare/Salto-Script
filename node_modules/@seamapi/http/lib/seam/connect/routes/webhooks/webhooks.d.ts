import type { RouteRequestBody, RouteRequestParams, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
export declare class SeamHttpWebhooks {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpWebhooks;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpWebhooks;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpWebhooks;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpWebhooks>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpWebhooks;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpWebhooks;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    create(parameters?: WebhooksCreateParameters, options?: WebhooksCreateOptions): WebhooksCreateRequest;
    delete(parameters?: WebhooksDeleteParameters, options?: WebhooksDeleteOptions): WebhooksDeleteRequest;
    get(parameters?: WebhooksGetParameters, options?: WebhooksGetOptions): WebhooksGetRequest;
    list(parameters?: WebhooksListParameters, options?: WebhooksListOptions): WebhooksListRequest;
    update(parameters?: WebhooksUpdateParameters, options?: WebhooksUpdateOptions): WebhooksUpdateRequest;
}
export type WebhooksCreateParameters = RouteRequestBody<'/webhooks/create'>;
/**
 * @deprecated Use WebhooksCreateParameters instead.
 */
export type WebhooksCreateBody = WebhooksCreateParameters;
/**
 * @deprecated Use WebhooksCreateRequest instead.
 */
export type WebhooksCreateResponse = SetNonNullable<Required<RouteResponse<'/webhooks/create'>>>;
export type WebhooksCreateRequest = SeamHttpRequest<WebhooksCreateResponse, 'webhook'>;
export interface WebhooksCreateOptions {
}
export type WebhooksDeleteParameters = RouteRequestBody<'/webhooks/delete'>;
/**
 * @deprecated Use WebhooksDeleteParameters instead.
 */
export type WebhooksDeleteParams = WebhooksDeleteParameters;
/**
 * @deprecated Use WebhooksDeleteRequest instead.
 */
export type WebhooksDeleteResponse = SetNonNullable<Required<RouteResponse<'/webhooks/delete'>>>;
export type WebhooksDeleteRequest = SeamHttpRequest<void, undefined>;
export interface WebhooksDeleteOptions {
}
export type WebhooksGetParameters = RouteRequestBody<'/webhooks/get'>;
/**
 * @deprecated Use WebhooksGetParameters instead.
 */
export type WebhooksGetParams = WebhooksGetParameters;
/**
 * @deprecated Use WebhooksGetRequest instead.
 */
export type WebhooksGetResponse = SetNonNullable<Required<RouteResponse<'/webhooks/get'>>>;
export type WebhooksGetRequest = SeamHttpRequest<WebhooksGetResponse, 'webhook'>;
export interface WebhooksGetOptions {
}
export type WebhooksListParameters = RouteRequestParams<'/webhooks/list'>;
/**
 * @deprecated Use WebhooksListParameters instead.
 */
export type WebhooksListParams = WebhooksListParameters;
/**
 * @deprecated Use WebhooksListRequest instead.
 */
export type WebhooksListResponse = SetNonNullable<Required<RouteResponse<'/webhooks/list'>>>;
export type WebhooksListRequest = SeamHttpRequest<WebhooksListResponse, 'webhooks'>;
export interface WebhooksListOptions {
}
export type WebhooksUpdateParameters = RouteRequestBody<'/webhooks/update'>;
/**
 * @deprecated Use WebhooksUpdateParameters instead.
 */
export type WebhooksUpdateBody = WebhooksUpdateParameters;
/**
 * @deprecated Use WebhooksUpdateRequest instead.
 */
export type WebhooksUpdateResponse = SetNonNullable<Required<RouteResponse<'/webhooks/update'>>>;
export type WebhooksUpdateRequest = SeamHttpRequest<void, undefined>;
export interface WebhooksUpdateOptions {
}
