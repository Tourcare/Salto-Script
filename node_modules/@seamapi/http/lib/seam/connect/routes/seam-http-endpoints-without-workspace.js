/*
 * Automatically generated by codegen/smith.ts.
 * Do not edit this file or add other files to this directory.
 */
import { seamApiLtsVersion } from '../../../../lib/lts-version.js';
import { createClient } from '../../../../lib/seam/connect/client.js';
import { isSeamHttpWithoutWorkspaceOptionsWithClient, isSeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken, isSeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken, SeamHttpWithoutWorkspaceInvalidOptionsError, } from '../../../../lib/seam/connect/options.js';
import { limitToSeamHttpRequestOptions, parseOptions, } from '../../../../lib/seam/connect/parse-options.js';
import { SeamHttpWorkspaces, } from './workspaces/index.js';
export class SeamHttpEndpointsWithoutWorkspace {
    client;
    defaults;
    ltsVersion = seamApiLtsVersion;
    static ltsVersion = seamApiLtsVersion;
    constructor(options = {}) {
        const opts = parseOptions(options);
        this.client = 'client' in opts ? opts.client : createClient(opts);
        this.defaults = limitToSeamHttpRequestOptions(opts);
    }
    static fromClient(client, options = {}) {
        const constructorOptions = { ...options, client };
        if (!isSeamHttpWithoutWorkspaceOptionsWithClient(constructorOptions)) {
            throw new SeamHttpWithoutWorkspaceInvalidOptionsError('Missing client');
        }
        return new SeamHttpEndpointsWithoutWorkspace(constructorOptions);
    }
    static fromConsoleSessionToken(consoleSessionToken, options = {}) {
        const constructorOptions = { ...options, consoleSessionToken };
        if (!isSeamHttpWithoutWorkspaceOptionsWithConsoleSessionToken(constructorOptions)) {
            throw new SeamHttpWithoutWorkspaceInvalidOptionsError('Missing consoleSessionToken');
        }
        return new SeamHttpEndpointsWithoutWorkspace(constructorOptions);
    }
    static fromPersonalAccessToken(personalAccessToken, options = {}) {
        const constructorOptions = { ...options, personalAccessToken };
        if (!isSeamHttpWithoutWorkspaceOptionsWithPersonalAccessToken(constructorOptions)) {
            throw new SeamHttpWithoutWorkspaceInvalidOptionsError('Missing personalAccessToken');
        }
        return new SeamHttpEndpointsWithoutWorkspace(constructorOptions);
    }
    get '/workspaces/create'() {
        const { client, defaults } = this;
        return function workspacesCreate(...args) {
            const seam = SeamHttpWorkspaces.fromClient(client, defaults);
            return seam.create(...args);
        };
    }
    get '/workspaces/list'() {
        const { client, defaults } = this;
        return function workspacesList(...args) {
            const seam = SeamHttpWorkspaces.fromClient(client, defaults);
            return seam.list(...args);
        };
    }
}
//# sourceMappingURL=seam-http-endpoints-without-workspace.js.map