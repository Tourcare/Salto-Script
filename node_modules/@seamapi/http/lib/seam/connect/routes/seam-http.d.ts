import { type Client } from '../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../lib/seam/connect/options.js';
import type { SeamHttpRequest } from '../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../lib/seam/connect/seam-paginator.js';
import { SeamHttpAccessCodes } from './access-codes/index.js';
import { SeamHttpAccessGrants } from './access-grants/index.js';
import { SeamHttpAccessMethods } from './access-methods/index.js';
import { SeamHttpAcs } from './acs/index.js';
import { SeamHttpActionAttempts } from './action-attempts/index.js';
import { SeamHttpBridges } from './bridges/index.js';
import { SeamHttpClientSessions } from './client-sessions/index.js';
import { SeamHttpConnectWebviews } from './connect-webviews/index.js';
import { SeamHttpConnectedAccounts } from './connected-accounts/index.js';
import { SeamHttpCustomers } from './customers/index.js';
import { SeamHttpDevices } from './devices/index.js';
import { SeamHttpEvents } from './events/index.js';
import { SeamHttpInstantKeys } from './instant-keys/index.js';
import { SeamHttpLocks } from './locks/index.js';
import { SeamHttpNoiseSensors } from './noise-sensors/index.js';
import { SeamHttpPhones } from './phones/index.js';
import { SeamHttpSpaces } from './spaces/index.js';
import { SeamHttpThermostats } from './thermostats/index.js';
import { SeamHttpUnstablePartner } from './unstable-partner/index.js';
import { SeamHttpUserIdentities } from './user-identities/index.js';
import { SeamHttpWebhooks } from './webhooks/index.js';
import { SeamHttpWorkspaces } from './workspaces/index.js';
export declare class SeamHttp {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttp;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttp;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttp;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttp>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttp;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttp;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get accessCodes(): SeamHttpAccessCodes;
    get accessGrants(): SeamHttpAccessGrants;
    get accessMethods(): SeamHttpAccessMethods;
    get acs(): SeamHttpAcs;
    get actionAttempts(): SeamHttpActionAttempts;
    get bridges(): SeamHttpBridges;
    get clientSessions(): SeamHttpClientSessions;
    get connectWebviews(): SeamHttpConnectWebviews;
    get connectedAccounts(): SeamHttpConnectedAccounts;
    get customers(): SeamHttpCustomers;
    get devices(): SeamHttpDevices;
    get events(): SeamHttpEvents;
    get instantKeys(): SeamHttpInstantKeys;
    get locks(): SeamHttpLocks;
    get noiseSensors(): SeamHttpNoiseSensors;
    get phones(): SeamHttpPhones;
    get spaces(): SeamHttpSpaces;
    get thermostats(): SeamHttpThermostats;
    get unstablePartner(): SeamHttpUnstablePartner;
    get userIdentities(): SeamHttpUserIdentities;
    get webhooks(): SeamHttpWebhooks;
    get workspaces(): SeamHttpWorkspaces;
}
