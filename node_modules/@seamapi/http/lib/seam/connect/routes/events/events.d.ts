import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
export declare class SeamHttpEvents {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpEvents;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpEvents;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpEvents;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpEvents>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpEvents;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpEvents;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get(parameters?: EventsGetParameters, options?: EventsGetOptions): EventsGetRequest;
    list(parameters?: EventsListParameters, options?: EventsListOptions): EventsListRequest;
}
export type EventsGetParameters = RouteRequestBody<'/events/get'>;
/**
 * @deprecated Use EventsGetParameters instead.
 */
export type EventsGetParams = EventsGetParameters;
/**
 * @deprecated Use EventsGetRequest instead.
 */
export type EventsGetResponse = SetNonNullable<Required<RouteResponse<'/events/get'>>>;
export type EventsGetRequest = SeamHttpRequest<EventsGetResponse, 'event'>;
export interface EventsGetOptions {
}
export type EventsListParameters = RouteRequestBody<'/events/list'>;
/**
 * @deprecated Use EventsListParameters instead.
 */
export type EventsListParams = EventsListParameters;
/**
 * @deprecated Use EventsListRequest instead.
 */
export type EventsListResponse = SetNonNullable<Required<RouteResponse<'/events/list'>>>;
export type EventsListRequest = SeamHttpRequest<EventsListResponse, 'events'>;
export interface EventsListOptions {
}
