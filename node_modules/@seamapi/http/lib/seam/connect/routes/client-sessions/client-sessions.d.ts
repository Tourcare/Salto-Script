import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
export declare class SeamHttpClientSessions {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpClientSessions;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpClientSessions;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpClientSessions;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpClientSessions>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpClientSessions;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpClientSessions;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    create(parameters?: ClientSessionsCreateParameters, options?: ClientSessionsCreateOptions): ClientSessionsCreateRequest;
    delete(parameters?: ClientSessionsDeleteParameters, options?: ClientSessionsDeleteOptions): ClientSessionsDeleteRequest;
    get(parameters?: ClientSessionsGetParameters, options?: ClientSessionsGetOptions): ClientSessionsGetRequest;
    getOrCreate(parameters?: ClientSessionsGetOrCreateParameters, options?: ClientSessionsGetOrCreateOptions): ClientSessionsGetOrCreateRequest;
    grantAccess(parameters?: ClientSessionsGrantAccessParameters, options?: ClientSessionsGrantAccessOptions): ClientSessionsGrantAccessRequest;
    list(parameters?: ClientSessionsListParameters, options?: ClientSessionsListOptions): ClientSessionsListRequest;
    revoke(parameters?: ClientSessionsRevokeParameters, options?: ClientSessionsRevokeOptions): ClientSessionsRevokeRequest;
}
export type ClientSessionsCreateParameters = RouteRequestBody<'/client_sessions/create'>;
/**
 * @deprecated Use ClientSessionsCreateParameters instead.
 */
export type ClientSessionsCreateBody = ClientSessionsCreateParameters;
/**
 * @deprecated Use ClientSessionsCreateRequest instead.
 */
export type ClientSessionsCreateResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/create'>>>;
export type ClientSessionsCreateRequest = SeamHttpRequest<ClientSessionsCreateResponse, 'client_session'>;
export interface ClientSessionsCreateOptions {
}
export type ClientSessionsDeleteParameters = RouteRequestBody<'/client_sessions/delete'>;
/**
 * @deprecated Use ClientSessionsDeleteParameters instead.
 */
export type ClientSessionsDeleteParams = ClientSessionsDeleteParameters;
/**
 * @deprecated Use ClientSessionsDeleteRequest instead.
 */
export type ClientSessionsDeleteResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/delete'>>>;
export type ClientSessionsDeleteRequest = SeamHttpRequest<void, undefined>;
export interface ClientSessionsDeleteOptions {
}
export type ClientSessionsGetParameters = RouteRequestBody<'/client_sessions/get'>;
/**
 * @deprecated Use ClientSessionsGetParameters instead.
 */
export type ClientSessionsGetParams = ClientSessionsGetParameters;
/**
 * @deprecated Use ClientSessionsGetRequest instead.
 */
export type ClientSessionsGetResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/get'>>>;
export type ClientSessionsGetRequest = SeamHttpRequest<ClientSessionsGetResponse, 'client_session'>;
export interface ClientSessionsGetOptions {
}
export type ClientSessionsGetOrCreateParameters = RouteRequestBody<'/client_sessions/get_or_create'>;
/**
 * @deprecated Use ClientSessionsGetOrCreateParameters instead.
 */
export type ClientSessionsGetOrCreateBody = ClientSessionsGetOrCreateParameters;
/**
 * @deprecated Use ClientSessionsGetOrCreateRequest instead.
 */
export type ClientSessionsGetOrCreateResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/get_or_create'>>>;
export type ClientSessionsGetOrCreateRequest = SeamHttpRequest<ClientSessionsGetOrCreateResponse, 'client_session'>;
export interface ClientSessionsGetOrCreateOptions {
}
export type ClientSessionsGrantAccessParameters = RouteRequestBody<'/client_sessions/grant_access'>;
/**
 * @deprecated Use ClientSessionsGrantAccessParameters instead.
 */
export type ClientSessionsGrantAccessBody = ClientSessionsGrantAccessParameters;
/**
 * @deprecated Use ClientSessionsGrantAccessRequest instead.
 */
export type ClientSessionsGrantAccessResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/grant_access'>>>;
export type ClientSessionsGrantAccessRequest = SeamHttpRequest<void, undefined>;
export interface ClientSessionsGrantAccessOptions {
}
export type ClientSessionsListParameters = RouteRequestBody<'/client_sessions/list'>;
/**
 * @deprecated Use ClientSessionsListParameters instead.
 */
export type ClientSessionsListParams = ClientSessionsListParameters;
/**
 * @deprecated Use ClientSessionsListRequest instead.
 */
export type ClientSessionsListResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/list'>>>;
export type ClientSessionsListRequest = SeamHttpRequest<ClientSessionsListResponse, 'client_sessions'>;
export interface ClientSessionsListOptions {
}
export type ClientSessionsRevokeParameters = RouteRequestBody<'/client_sessions/revoke'>;
/**
 * @deprecated Use ClientSessionsRevokeParameters instead.
 */
export type ClientSessionsRevokeBody = ClientSessionsRevokeParameters;
/**
 * @deprecated Use ClientSessionsRevokeRequest instead.
 */
export type ClientSessionsRevokeResponse = SetNonNullable<Required<RouteResponse<'/client_sessions/revoke'>>>;
export type ClientSessionsRevokeRequest = SeamHttpRequest<void, undefined>;
export interface ClientSessionsRevokeOptions {
}
