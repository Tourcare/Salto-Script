import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpThermostatsSchedules {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpThermostatsSchedules;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpThermostatsSchedules;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpThermostatsSchedules;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpThermostatsSchedules>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpThermostatsSchedules;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpThermostatsSchedules;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    create(parameters?: ThermostatsSchedulesCreateParameters, options?: ThermostatsSchedulesCreateOptions): ThermostatsSchedulesCreateRequest;
    delete(parameters?: ThermostatsSchedulesDeleteParameters, options?: ThermostatsSchedulesDeleteOptions): ThermostatsSchedulesDeleteRequest;
    get(parameters?: ThermostatsSchedulesGetParameters, options?: ThermostatsSchedulesGetOptions): ThermostatsSchedulesGetRequest;
    list(parameters?: ThermostatsSchedulesListParameters, options?: ThermostatsSchedulesListOptions): ThermostatsSchedulesListRequest;
    update(parameters?: ThermostatsSchedulesUpdateParameters, options?: ThermostatsSchedulesUpdateOptions): ThermostatsSchedulesUpdateRequest;
}
export type ThermostatsSchedulesCreateParameters = RouteRequestBody<'/thermostats/schedules/create'>;
/**
 * @deprecated Use ThermostatsSchedulesCreateParameters instead.
 */
export type ThermostatsSchedulesCreateBody = ThermostatsSchedulesCreateParameters;
/**
 * @deprecated Use ThermostatsSchedulesCreateRequest instead.
 */
export type ThermostatsSchedulesCreateResponse = SetNonNullable<Required<RouteResponse<'/thermostats/schedules/create'>>>;
export type ThermostatsSchedulesCreateRequest = SeamHttpRequest<ThermostatsSchedulesCreateResponse, 'thermostat_schedule'>;
export interface ThermostatsSchedulesCreateOptions {
}
export type ThermostatsSchedulesDeleteParameters = RouteRequestBody<'/thermostats/schedules/delete'>;
/**
 * @deprecated Use ThermostatsSchedulesDeleteParameters instead.
 */
export type ThermostatsSchedulesDeleteParams = ThermostatsSchedulesDeleteParameters;
/**
 * @deprecated Use ThermostatsSchedulesDeleteRequest instead.
 */
export type ThermostatsSchedulesDeleteResponse = SetNonNullable<Required<RouteResponse<'/thermostats/schedules/delete'>>>;
export type ThermostatsSchedulesDeleteRequest = SeamHttpRequest<void, undefined>;
export interface ThermostatsSchedulesDeleteOptions {
}
export type ThermostatsSchedulesGetParameters = RouteRequestBody<'/thermostats/schedules/get'>;
/**
 * @deprecated Use ThermostatsSchedulesGetParameters instead.
 */
export type ThermostatsSchedulesGetParams = ThermostatsSchedulesGetParameters;
/**
 * @deprecated Use ThermostatsSchedulesGetRequest instead.
 */
export type ThermostatsSchedulesGetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/schedules/get'>>>;
export type ThermostatsSchedulesGetRequest = SeamHttpRequest<ThermostatsSchedulesGetResponse, 'thermostat_schedule'>;
export interface ThermostatsSchedulesGetOptions {
}
export type ThermostatsSchedulesListParameters = RouteRequestBody<'/thermostats/schedules/list'>;
/**
 * @deprecated Use ThermostatsSchedulesListParameters instead.
 */
export type ThermostatsSchedulesListParams = ThermostatsSchedulesListParameters;
/**
 * @deprecated Use ThermostatsSchedulesListRequest instead.
 */
export type ThermostatsSchedulesListResponse = SetNonNullable<Required<RouteResponse<'/thermostats/schedules/list'>>>;
export type ThermostatsSchedulesListRequest = SeamHttpRequest<ThermostatsSchedulesListResponse, 'thermostat_schedules'>;
export interface ThermostatsSchedulesListOptions {
}
export type ThermostatsSchedulesUpdateParameters = RouteRequestBody<'/thermostats/schedules/update'>;
/**
 * @deprecated Use ThermostatsSchedulesUpdateParameters instead.
 */
export type ThermostatsSchedulesUpdateBody = ThermostatsSchedulesUpdateParameters;
/**
 * @deprecated Use ThermostatsSchedulesUpdateRequest instead.
 */
export type ThermostatsSchedulesUpdateResponse = SetNonNullable<Required<RouteResponse<'/thermostats/schedules/update'>>>;
export type ThermostatsSchedulesUpdateRequest = SeamHttpRequest<void, undefined>;
export interface ThermostatsSchedulesUpdateOptions {
}
