import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpThermostatsDailyPrograms {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpThermostatsDailyPrograms;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpThermostatsDailyPrograms;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpThermostatsDailyPrograms;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpThermostatsDailyPrograms>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpThermostatsDailyPrograms;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpThermostatsDailyPrograms;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    create(parameters?: ThermostatsDailyProgramsCreateParameters, options?: ThermostatsDailyProgramsCreateOptions): ThermostatsDailyProgramsCreateRequest;
    delete(parameters?: ThermostatsDailyProgramsDeleteParameters, options?: ThermostatsDailyProgramsDeleteOptions): ThermostatsDailyProgramsDeleteRequest;
    update(parameters?: ThermostatsDailyProgramsUpdateParameters, options?: ThermostatsDailyProgramsUpdateOptions): ThermostatsDailyProgramsUpdateRequest;
}
export type ThermostatsDailyProgramsCreateParameters = RouteRequestBody<'/thermostats/daily_programs/create'>;
/**
 * @deprecated Use ThermostatsDailyProgramsCreateParameters instead.
 */
export type ThermostatsDailyProgramsCreateBody = ThermostatsDailyProgramsCreateParameters;
/**
 * @deprecated Use ThermostatsDailyProgramsCreateRequest instead.
 */
export type ThermostatsDailyProgramsCreateResponse = SetNonNullable<Required<RouteResponse<'/thermostats/daily_programs/create'>>>;
export type ThermostatsDailyProgramsCreateRequest = SeamHttpRequest<ThermostatsDailyProgramsCreateResponse, 'thermostat_daily_program'>;
export interface ThermostatsDailyProgramsCreateOptions {
}
export type ThermostatsDailyProgramsDeleteParameters = RouteRequestBody<'/thermostats/daily_programs/delete'>;
/**
 * @deprecated Use ThermostatsDailyProgramsDeleteParameters instead.
 */
export type ThermostatsDailyProgramsDeleteParams = ThermostatsDailyProgramsDeleteParameters;
/**
 * @deprecated Use ThermostatsDailyProgramsDeleteRequest instead.
 */
export type ThermostatsDailyProgramsDeleteResponse = SetNonNullable<Required<RouteResponse<'/thermostats/daily_programs/delete'>>>;
export type ThermostatsDailyProgramsDeleteRequest = SeamHttpRequest<void, undefined>;
export interface ThermostatsDailyProgramsDeleteOptions {
}
export type ThermostatsDailyProgramsUpdateParameters = RouteRequestBody<'/thermostats/daily_programs/update'>;
/**
 * @deprecated Use ThermostatsDailyProgramsUpdateParameters instead.
 */
export type ThermostatsDailyProgramsUpdateBody = ThermostatsDailyProgramsUpdateParameters;
/**
 * @deprecated Use ThermostatsDailyProgramsUpdateRequest instead.
 */
export type ThermostatsDailyProgramsUpdateResponse = SetNonNullable<Required<RouteResponse<'/thermostats/daily_programs/update'>>>;
export type ThermostatsDailyProgramsUpdateRequest = SeamHttpRequest<ThermostatsDailyProgramsUpdateResponse, 'action_attempt'>;
export type ThermostatsDailyProgramsUpdateOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
