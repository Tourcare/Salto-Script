import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
import { SeamHttpThermostatsDailyPrograms } from './daily-programs/index.js';
import { SeamHttpThermostatsSchedules } from './schedules/index.js';
import { SeamHttpThermostatsSimulate } from './simulate/index.js';
export declare class SeamHttpThermostats {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpThermostats;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpThermostats;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpThermostats;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpThermostats>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpThermostats;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpThermostats;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get dailyPrograms(): SeamHttpThermostatsDailyPrograms;
    get schedules(): SeamHttpThermostatsSchedules;
    get simulate(): SeamHttpThermostatsSimulate;
    activateClimatePreset(parameters?: ThermostatsActivateClimatePresetParameters, options?: ThermostatsActivateClimatePresetOptions): ThermostatsActivateClimatePresetRequest;
    cool(parameters?: ThermostatsCoolParameters, options?: ThermostatsCoolOptions): ThermostatsCoolRequest;
    createClimatePreset(parameters?: ThermostatsCreateClimatePresetParameters, options?: ThermostatsCreateClimatePresetOptions): ThermostatsCreateClimatePresetRequest;
    deleteClimatePreset(parameters?: ThermostatsDeleteClimatePresetParameters, options?: ThermostatsDeleteClimatePresetOptions): ThermostatsDeleteClimatePresetRequest;
    get(parameters?: ThermostatsGetParameters, options?: ThermostatsGetOptions): ThermostatsGetRequest;
    heat(parameters?: ThermostatsHeatParameters, options?: ThermostatsHeatOptions): ThermostatsHeatRequest;
    heatCool(parameters?: ThermostatsHeatCoolParameters, options?: ThermostatsHeatCoolOptions): ThermostatsHeatCoolRequest;
    list(parameters?: ThermostatsListParameters, options?: ThermostatsListOptions): ThermostatsListRequest;
    off(parameters?: ThermostatsOffParameters, options?: ThermostatsOffOptions): ThermostatsOffRequest;
    setFallbackClimatePreset(parameters?: ThermostatsSetFallbackClimatePresetParameters, options?: ThermostatsSetFallbackClimatePresetOptions): ThermostatsSetFallbackClimatePresetRequest;
    setFanMode(parameters?: ThermostatsSetFanModeParameters, options?: ThermostatsSetFanModeOptions): ThermostatsSetFanModeRequest;
    setHvacMode(parameters?: ThermostatsSetHvacModeParameters, options?: ThermostatsSetHvacModeOptions): ThermostatsSetHvacModeRequest;
    setTemperatureThreshold(parameters?: ThermostatsSetTemperatureThresholdParameters, options?: ThermostatsSetTemperatureThresholdOptions): ThermostatsSetTemperatureThresholdRequest;
    updateClimatePreset(parameters?: ThermostatsUpdateClimatePresetParameters, options?: ThermostatsUpdateClimatePresetOptions): ThermostatsUpdateClimatePresetRequest;
    updateWeeklyProgram(parameters?: ThermostatsUpdateWeeklyProgramParameters, options?: ThermostatsUpdateWeeklyProgramOptions): ThermostatsUpdateWeeklyProgramRequest;
}
export type ThermostatsActivateClimatePresetParameters = RouteRequestBody<'/thermostats/activate_climate_preset'>;
/**
 * @deprecated Use ThermostatsActivateClimatePresetParameters instead.
 */
export type ThermostatsActivateClimatePresetBody = ThermostatsActivateClimatePresetParameters;
/**
 * @deprecated Use ThermostatsActivateClimatePresetRequest instead.
 */
export type ThermostatsActivateClimatePresetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/activate_climate_preset'>>>;
export type ThermostatsActivateClimatePresetRequest = SeamHttpRequest<ThermostatsActivateClimatePresetResponse, 'action_attempt'>;
export type ThermostatsActivateClimatePresetOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsCoolParameters = RouteRequestBody<'/thermostats/cool'>;
/**
 * @deprecated Use ThermostatsCoolParameters instead.
 */
export type ThermostatsCoolBody = ThermostatsCoolParameters;
/**
 * @deprecated Use ThermostatsCoolRequest instead.
 */
export type ThermostatsCoolResponse = SetNonNullable<Required<RouteResponse<'/thermostats/cool'>>>;
export type ThermostatsCoolRequest = SeamHttpRequest<ThermostatsCoolResponse, 'action_attempt'>;
export type ThermostatsCoolOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsCreateClimatePresetParameters = RouteRequestBody<'/thermostats/create_climate_preset'>;
/**
 * @deprecated Use ThermostatsCreateClimatePresetParameters instead.
 */
export type ThermostatsCreateClimatePresetBody = ThermostatsCreateClimatePresetParameters;
/**
 * @deprecated Use ThermostatsCreateClimatePresetRequest instead.
 */
export type ThermostatsCreateClimatePresetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/create_climate_preset'>>>;
export type ThermostatsCreateClimatePresetRequest = SeamHttpRequest<void, undefined>;
export interface ThermostatsCreateClimatePresetOptions {
}
export type ThermostatsDeleteClimatePresetParameters = RouteRequestBody<'/thermostats/delete_climate_preset'>;
/**
 * @deprecated Use ThermostatsDeleteClimatePresetParameters instead.
 */
export type ThermostatsDeleteClimatePresetParams = ThermostatsDeleteClimatePresetParameters;
/**
 * @deprecated Use ThermostatsDeleteClimatePresetRequest instead.
 */
export type ThermostatsDeleteClimatePresetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/delete_climate_preset'>>>;
export type ThermostatsDeleteClimatePresetRequest = SeamHttpRequest<void, undefined>;
export interface ThermostatsDeleteClimatePresetOptions {
}
export type ThermostatsGetParameters = RouteRequestBody<'/thermostats/get'>;
/**
 * @deprecated Use ThermostatsGetParameters instead.
 */
export type ThermostatsGetParams = ThermostatsGetParameters;
/**
 * @deprecated Use ThermostatsGetRequest instead.
 */
export type ThermostatsGetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/get'>>>;
export type ThermostatsGetRequest = SeamHttpRequest<ThermostatsGetResponse, 'thermostat'>;
export interface ThermostatsGetOptions {
}
export type ThermostatsHeatParameters = RouteRequestBody<'/thermostats/heat'>;
/**
 * @deprecated Use ThermostatsHeatParameters instead.
 */
export type ThermostatsHeatBody = ThermostatsHeatParameters;
/**
 * @deprecated Use ThermostatsHeatRequest instead.
 */
export type ThermostatsHeatResponse = SetNonNullable<Required<RouteResponse<'/thermostats/heat'>>>;
export type ThermostatsHeatRequest = SeamHttpRequest<ThermostatsHeatResponse, 'action_attempt'>;
export type ThermostatsHeatOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsHeatCoolParameters = RouteRequestBody<'/thermostats/heat_cool'>;
/**
 * @deprecated Use ThermostatsHeatCoolParameters instead.
 */
export type ThermostatsHeatCoolBody = ThermostatsHeatCoolParameters;
/**
 * @deprecated Use ThermostatsHeatCoolRequest instead.
 */
export type ThermostatsHeatCoolResponse = SetNonNullable<Required<RouteResponse<'/thermostats/heat_cool'>>>;
export type ThermostatsHeatCoolRequest = SeamHttpRequest<ThermostatsHeatCoolResponse, 'action_attempt'>;
export type ThermostatsHeatCoolOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsListParameters = RouteRequestBody<'/thermostats/list'>;
/**
 * @deprecated Use ThermostatsListParameters instead.
 */
export type ThermostatsListParams = ThermostatsListParameters;
/**
 * @deprecated Use ThermostatsListRequest instead.
 */
export type ThermostatsListResponse = SetNonNullable<Required<RouteResponse<'/thermostats/list'>>>;
export type ThermostatsListRequest = SeamHttpRequest<ThermostatsListResponse, 'devices'>;
export interface ThermostatsListOptions {
}
export type ThermostatsOffParameters = RouteRequestBody<'/thermostats/off'>;
/**
 * @deprecated Use ThermostatsOffParameters instead.
 */
export type ThermostatsOffBody = ThermostatsOffParameters;
/**
 * @deprecated Use ThermostatsOffRequest instead.
 */
export type ThermostatsOffResponse = SetNonNullable<Required<RouteResponse<'/thermostats/off'>>>;
export type ThermostatsOffRequest = SeamHttpRequest<ThermostatsOffResponse, 'action_attempt'>;
export type ThermostatsOffOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsSetFallbackClimatePresetParameters = RouteRequestBody<'/thermostats/set_fallback_climate_preset'>;
/**
 * @deprecated Use ThermostatsSetFallbackClimatePresetParameters instead.
 */
export type ThermostatsSetFallbackClimatePresetBody = ThermostatsSetFallbackClimatePresetParameters;
/**
 * @deprecated Use ThermostatsSetFallbackClimatePresetRequest instead.
 */
export type ThermostatsSetFallbackClimatePresetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/set_fallback_climate_preset'>>>;
export type ThermostatsSetFallbackClimatePresetRequest = SeamHttpRequest<void, undefined>;
export interface ThermostatsSetFallbackClimatePresetOptions {
}
export type ThermostatsSetFanModeParameters = RouteRequestBody<'/thermostats/set_fan_mode'>;
/**
 * @deprecated Use ThermostatsSetFanModeParameters instead.
 */
export type ThermostatsSetFanModeBody = ThermostatsSetFanModeParameters;
/**
 * @deprecated Use ThermostatsSetFanModeRequest instead.
 */
export type ThermostatsSetFanModeResponse = SetNonNullable<Required<RouteResponse<'/thermostats/set_fan_mode'>>>;
export type ThermostatsSetFanModeRequest = SeamHttpRequest<ThermostatsSetFanModeResponse, 'action_attempt'>;
export type ThermostatsSetFanModeOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsSetHvacModeParameters = RouteRequestBody<'/thermostats/set_hvac_mode'>;
/**
 * @deprecated Use ThermostatsSetHvacModeParameters instead.
 */
export type ThermostatsSetHvacModeBody = ThermostatsSetHvacModeParameters;
/**
 * @deprecated Use ThermostatsSetHvacModeRequest instead.
 */
export type ThermostatsSetHvacModeResponse = SetNonNullable<Required<RouteResponse<'/thermostats/set_hvac_mode'>>>;
export type ThermostatsSetHvacModeRequest = SeamHttpRequest<ThermostatsSetHvacModeResponse, 'action_attempt'>;
export type ThermostatsSetHvacModeOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type ThermostatsSetTemperatureThresholdParameters = RouteRequestBody<'/thermostats/set_temperature_threshold'>;
/**
 * @deprecated Use ThermostatsSetTemperatureThresholdParameters instead.
 */
export type ThermostatsSetTemperatureThresholdBody = ThermostatsSetTemperatureThresholdParameters;
/**
 * @deprecated Use ThermostatsSetTemperatureThresholdRequest instead.
 */
export type ThermostatsSetTemperatureThresholdResponse = SetNonNullable<Required<RouteResponse<'/thermostats/set_temperature_threshold'>>>;
export type ThermostatsSetTemperatureThresholdRequest = SeamHttpRequest<void, undefined>;
export interface ThermostatsSetTemperatureThresholdOptions {
}
export type ThermostatsUpdateClimatePresetParameters = RouteRequestBody<'/thermostats/update_climate_preset'>;
/**
 * @deprecated Use ThermostatsUpdateClimatePresetParameters instead.
 */
export type ThermostatsUpdateClimatePresetBody = ThermostatsUpdateClimatePresetParameters;
/**
 * @deprecated Use ThermostatsUpdateClimatePresetRequest instead.
 */
export type ThermostatsUpdateClimatePresetResponse = SetNonNullable<Required<RouteResponse<'/thermostats/update_climate_preset'>>>;
export type ThermostatsUpdateClimatePresetRequest = SeamHttpRequest<void, undefined>;
export interface ThermostatsUpdateClimatePresetOptions {
}
export type ThermostatsUpdateWeeklyProgramParameters = RouteRequestBody<'/thermostats/update_weekly_program'>;
/**
 * @deprecated Use ThermostatsUpdateWeeklyProgramParameters instead.
 */
export type ThermostatsUpdateWeeklyProgramBody = ThermostatsUpdateWeeklyProgramParameters;
/**
 * @deprecated Use ThermostatsUpdateWeeklyProgramRequest instead.
 */
export type ThermostatsUpdateWeeklyProgramResponse = SetNonNullable<Required<RouteResponse<'/thermostats/update_weekly_program'>>>;
export type ThermostatsUpdateWeeklyProgramRequest = SeamHttpRequest<ThermostatsUpdateWeeklyProgramResponse, 'action_attempt'>;
export type ThermostatsUpdateWeeklyProgramOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
