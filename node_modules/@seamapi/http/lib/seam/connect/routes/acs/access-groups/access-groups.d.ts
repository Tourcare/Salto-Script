import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
import { SeamHttpAcsAccessGroupsUnmanaged } from './unmanaged/index.js';
export declare class SeamHttpAcsAccessGroups {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsAccessGroups;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsAccessGroups;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsAccessGroups;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsAccessGroups>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsAccessGroups;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsAccessGroups;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get unmanaged(): SeamHttpAcsAccessGroupsUnmanaged;
    addUser(parameters?: AcsAccessGroupsAddUserParameters, options?: AcsAccessGroupsAddUserOptions): AcsAccessGroupsAddUserRequest;
    get(parameters?: AcsAccessGroupsGetParameters, options?: AcsAccessGroupsGetOptions): AcsAccessGroupsGetRequest;
    list(parameters?: AcsAccessGroupsListParameters, options?: AcsAccessGroupsListOptions): AcsAccessGroupsListRequest;
    listAccessibleEntrances(parameters?: AcsAccessGroupsListAccessibleEntrancesParameters, options?: AcsAccessGroupsListAccessibleEntrancesOptions): AcsAccessGroupsListAccessibleEntrancesRequest;
    listUsers(parameters?: AcsAccessGroupsListUsersParameters, options?: AcsAccessGroupsListUsersOptions): AcsAccessGroupsListUsersRequest;
    removeUser(parameters?: AcsAccessGroupsRemoveUserParameters, options?: AcsAccessGroupsRemoveUserOptions): AcsAccessGroupsRemoveUserRequest;
}
export type AcsAccessGroupsAddUserParameters = RouteRequestBody<'/acs/access_groups/add_user'>;
/**
 * @deprecated Use AcsAccessGroupsAddUserParameters instead.
 */
export type AcsAccessGroupsAddUserBody = AcsAccessGroupsAddUserParameters;
/**
 * @deprecated Use AcsAccessGroupsAddUserRequest instead.
 */
export type AcsAccessGroupsAddUserResponse = SetNonNullable<Required<RouteResponse<'/acs/access_groups/add_user'>>>;
export type AcsAccessGroupsAddUserRequest = SeamHttpRequest<void, undefined>;
export interface AcsAccessGroupsAddUserOptions {
}
export type AcsAccessGroupsGetParameters = RouteRequestBody<'/acs/access_groups/get'>;
/**
 * @deprecated Use AcsAccessGroupsGetParameters instead.
 */
export type AcsAccessGroupsGetParams = AcsAccessGroupsGetParameters;
/**
 * @deprecated Use AcsAccessGroupsGetRequest instead.
 */
export type AcsAccessGroupsGetResponse = SetNonNullable<Required<RouteResponse<'/acs/access_groups/get'>>>;
export type AcsAccessGroupsGetRequest = SeamHttpRequest<AcsAccessGroupsGetResponse, 'acs_access_group'>;
export interface AcsAccessGroupsGetOptions {
}
export type AcsAccessGroupsListParameters = RouteRequestBody<'/acs/access_groups/list'>;
/**
 * @deprecated Use AcsAccessGroupsListParameters instead.
 */
export type AcsAccessGroupsListParams = AcsAccessGroupsListParameters;
/**
 * @deprecated Use AcsAccessGroupsListRequest instead.
 */
export type AcsAccessGroupsListResponse = SetNonNullable<Required<RouteResponse<'/acs/access_groups/list'>>>;
export type AcsAccessGroupsListRequest = SeamHttpRequest<AcsAccessGroupsListResponse, 'acs_access_groups'>;
export interface AcsAccessGroupsListOptions {
}
export type AcsAccessGroupsListAccessibleEntrancesParameters = RouteRequestBody<'/acs/access_groups/list_accessible_entrances'>;
/**
 * @deprecated Use AcsAccessGroupsListAccessibleEntrancesParameters instead.
 */
export type AcsAccessGroupsListAccessibleEntrancesParams = AcsAccessGroupsListAccessibleEntrancesParameters;
/**
 * @deprecated Use AcsAccessGroupsListAccessibleEntrancesRequest instead.
 */
export type AcsAccessGroupsListAccessibleEntrancesResponse = SetNonNullable<Required<RouteResponse<'/acs/access_groups/list_accessible_entrances'>>>;
export type AcsAccessGroupsListAccessibleEntrancesRequest = SeamHttpRequest<AcsAccessGroupsListAccessibleEntrancesResponse, 'acs_entrances'>;
export interface AcsAccessGroupsListAccessibleEntrancesOptions {
}
export type AcsAccessGroupsListUsersParameters = RouteRequestBody<'/acs/access_groups/list_users'>;
/**
 * @deprecated Use AcsAccessGroupsListUsersParameters instead.
 */
export type AcsAccessGroupsListUsersParams = AcsAccessGroupsListUsersParameters;
/**
 * @deprecated Use AcsAccessGroupsListUsersRequest instead.
 */
export type AcsAccessGroupsListUsersResponse = SetNonNullable<Required<RouteResponse<'/acs/access_groups/list_users'>>>;
export type AcsAccessGroupsListUsersRequest = SeamHttpRequest<AcsAccessGroupsListUsersResponse, 'acs_users'>;
export interface AcsAccessGroupsListUsersOptions {
}
export type AcsAccessGroupsRemoveUserParameters = RouteRequestBody<'/acs/access_groups/remove_user'>;
/**
 * @deprecated Use AcsAccessGroupsRemoveUserParameters instead.
 */
export type AcsAccessGroupsRemoveUserParams = AcsAccessGroupsRemoveUserParameters;
/**
 * @deprecated Use AcsAccessGroupsRemoveUserRequest instead.
 */
export type AcsAccessGroupsRemoveUserResponse = SetNonNullable<Required<RouteResponse<'/acs/access_groups/remove_user'>>>;
export type AcsAccessGroupsRemoveUserRequest = SeamHttpRequest<void, undefined>;
export interface AcsAccessGroupsRemoveUserOptions {
}
