import type { RouteRequestBody, RouteRequestParams, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
import { SeamHttpAcsCredentialsUnmanaged } from './unmanaged/index.js';
export declare class SeamHttpAcsCredentials {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsCredentials;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsCredentials;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsCredentials;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsCredentials>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsCredentials;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsCredentials;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get unmanaged(): SeamHttpAcsCredentialsUnmanaged;
    assign(parameters?: AcsCredentialsAssignParameters, options?: AcsCredentialsAssignOptions): AcsCredentialsAssignRequest;
    create(parameters?: AcsCredentialsCreateParameters, options?: AcsCredentialsCreateOptions): AcsCredentialsCreateRequest;
    createOfflineCode(parameters?: AcsCredentialsCreateOfflineCodeParameters, options?: AcsCredentialsCreateOfflineCodeOptions): AcsCredentialsCreateOfflineCodeRequest;
    delete(parameters?: AcsCredentialsDeleteParameters, options?: AcsCredentialsDeleteOptions): AcsCredentialsDeleteRequest;
    get(parameters?: AcsCredentialsGetParameters, options?: AcsCredentialsGetOptions): AcsCredentialsGetRequest;
    list(parameters?: AcsCredentialsListParameters, options?: AcsCredentialsListOptions): AcsCredentialsListRequest;
    listAccessibleEntrances(parameters?: AcsCredentialsListAccessibleEntrancesParameters, options?: AcsCredentialsListAccessibleEntrancesOptions): AcsCredentialsListAccessibleEntrancesRequest;
    unassign(parameters?: AcsCredentialsUnassignParameters, options?: AcsCredentialsUnassignOptions): AcsCredentialsUnassignRequest;
    update(parameters?: AcsCredentialsUpdateParameters, options?: AcsCredentialsUpdateOptions): AcsCredentialsUpdateRequest;
}
export type AcsCredentialsAssignParameters = RouteRequestBody<'/acs/credentials/assign'>;
/**
 * @deprecated Use AcsCredentialsAssignParameters instead.
 */
export type AcsCredentialsAssignBody = AcsCredentialsAssignParameters;
/**
 * @deprecated Use AcsCredentialsAssignRequest instead.
 */
export type AcsCredentialsAssignResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/assign'>>>;
export type AcsCredentialsAssignRequest = SeamHttpRequest<void, undefined>;
export interface AcsCredentialsAssignOptions {
}
export type AcsCredentialsCreateParameters = RouteRequestBody<'/acs/credentials/create'>;
/**
 * @deprecated Use AcsCredentialsCreateParameters instead.
 */
export type AcsCredentialsCreateBody = AcsCredentialsCreateParameters;
/**
 * @deprecated Use AcsCredentialsCreateRequest instead.
 */
export type AcsCredentialsCreateResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/create'>>>;
export type AcsCredentialsCreateRequest = SeamHttpRequest<AcsCredentialsCreateResponse, 'acs_credential'>;
export interface AcsCredentialsCreateOptions {
}
export type AcsCredentialsCreateOfflineCodeParameters = RouteRequestBody<'/acs/credentials/create_offline_code'>;
/**
 * @deprecated Use AcsCredentialsCreateOfflineCodeParameters instead.
 */
export type AcsCredentialsCreateOfflineCodeBody = AcsCredentialsCreateOfflineCodeParameters;
/**
 * @deprecated Use AcsCredentialsCreateOfflineCodeRequest instead.
 */
export type AcsCredentialsCreateOfflineCodeResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/create_offline_code'>>>;
export type AcsCredentialsCreateOfflineCodeRequest = SeamHttpRequest<AcsCredentialsCreateOfflineCodeResponse, 'acs_credential'>;
export interface AcsCredentialsCreateOfflineCodeOptions {
}
export type AcsCredentialsDeleteParameters = RouteRequestBody<'/acs/credentials/delete'>;
/**
 * @deprecated Use AcsCredentialsDeleteParameters instead.
 */
export type AcsCredentialsDeleteParams = AcsCredentialsDeleteParameters;
/**
 * @deprecated Use AcsCredentialsDeleteRequest instead.
 */
export type AcsCredentialsDeleteResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/delete'>>>;
export type AcsCredentialsDeleteRequest = SeamHttpRequest<void, undefined>;
export interface AcsCredentialsDeleteOptions {
}
export type AcsCredentialsGetParameters = RouteRequestBody<'/acs/credentials/get'>;
/**
 * @deprecated Use AcsCredentialsGetParameters instead.
 */
export type AcsCredentialsGetParams = AcsCredentialsGetParameters;
/**
 * @deprecated Use AcsCredentialsGetRequest instead.
 */
export type AcsCredentialsGetResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/get'>>>;
export type AcsCredentialsGetRequest = SeamHttpRequest<AcsCredentialsGetResponse, 'acs_credential'>;
export interface AcsCredentialsGetOptions {
}
export type AcsCredentialsListParameters = RouteRequestParams<'/acs/credentials/list'>;
/**
 * @deprecated Use AcsCredentialsListParameters instead.
 */
export type AcsCredentialsListParams = AcsCredentialsListParameters;
/**
 * @deprecated Use AcsCredentialsListRequest instead.
 */
export type AcsCredentialsListResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/list'>>>;
export type AcsCredentialsListRequest = SeamHttpRequest<AcsCredentialsListResponse, 'acs_credentials'>;
export interface AcsCredentialsListOptions {
}
export type AcsCredentialsListAccessibleEntrancesParameters = RouteRequestBody<'/acs/credentials/list_accessible_entrances'>;
/**
 * @deprecated Use AcsCredentialsListAccessibleEntrancesParameters instead.
 */
export type AcsCredentialsListAccessibleEntrancesParams = AcsCredentialsListAccessibleEntrancesParameters;
/**
 * @deprecated Use AcsCredentialsListAccessibleEntrancesRequest instead.
 */
export type AcsCredentialsListAccessibleEntrancesResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/list_accessible_entrances'>>>;
export type AcsCredentialsListAccessibleEntrancesRequest = SeamHttpRequest<AcsCredentialsListAccessibleEntrancesResponse, 'acs_entrances'>;
export interface AcsCredentialsListAccessibleEntrancesOptions {
}
export type AcsCredentialsUnassignParameters = RouteRequestBody<'/acs/credentials/unassign'>;
/**
 * @deprecated Use AcsCredentialsUnassignParameters instead.
 */
export type AcsCredentialsUnassignBody = AcsCredentialsUnassignParameters;
/**
 * @deprecated Use AcsCredentialsUnassignRequest instead.
 */
export type AcsCredentialsUnassignResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/unassign'>>>;
export type AcsCredentialsUnassignRequest = SeamHttpRequest<void, undefined>;
export interface AcsCredentialsUnassignOptions {
}
export type AcsCredentialsUpdateParameters = RouteRequestBody<'/acs/credentials/update'>;
/**
 * @deprecated Use AcsCredentialsUpdateParameters instead.
 */
export type AcsCredentialsUpdateBody = AcsCredentialsUpdateParameters;
/**
 * @deprecated Use AcsCredentialsUpdateRequest instead.
 */
export type AcsCredentialsUpdateResponse = SetNonNullable<Required<RouteResponse<'/acs/credentials/update'>>>;
export type AcsCredentialsUpdateRequest = SeamHttpRequest<void, undefined>;
export interface AcsCredentialsUpdateOptions {
}
