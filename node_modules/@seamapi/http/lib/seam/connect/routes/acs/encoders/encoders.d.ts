import type { RouteRequestBody, RouteRequestParams, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
import { SeamHttpAcsEncodersSimulate } from './simulate/index.js';
export declare class SeamHttpAcsEncoders {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsEncoders;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsEncoders;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsEncoders;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsEncoders>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsEncoders;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsEncoders;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get simulate(): SeamHttpAcsEncodersSimulate;
    encodeCredential(parameters?: AcsEncodersEncodeCredentialParameters, options?: AcsEncodersEncodeCredentialOptions): AcsEncodersEncodeCredentialRequest;
    get(parameters?: AcsEncodersGetParameters, options?: AcsEncodersGetOptions): AcsEncodersGetRequest;
    list(parameters?: AcsEncodersListParameters, options?: AcsEncodersListOptions): AcsEncodersListRequest;
    scanCredential(parameters?: AcsEncodersScanCredentialParameters, options?: AcsEncodersScanCredentialOptions): AcsEncodersScanCredentialRequest;
}
export type AcsEncodersEncodeCredentialParameters = RouteRequestBody<'/acs/encoders/encode_credential'>;
/**
 * @deprecated Use AcsEncodersEncodeCredentialParameters instead.
 */
export type AcsEncodersEncodeCredentialBody = AcsEncodersEncodeCredentialParameters;
/**
 * @deprecated Use AcsEncodersEncodeCredentialRequest instead.
 */
export type AcsEncodersEncodeCredentialResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/encode_credential'>>>;
export type AcsEncodersEncodeCredentialRequest = SeamHttpRequest<AcsEncodersEncodeCredentialResponse, 'action_attempt'>;
export type AcsEncodersEncodeCredentialOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type AcsEncodersGetParameters = RouteRequestBody<'/acs/encoders/get'>;
/**
 * @deprecated Use AcsEncodersGetParameters instead.
 */
export type AcsEncodersGetParams = AcsEncodersGetParameters;
/**
 * @deprecated Use AcsEncodersGetRequest instead.
 */
export type AcsEncodersGetResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/get'>>>;
export type AcsEncodersGetRequest = SeamHttpRequest<AcsEncodersGetResponse, 'acs_encoder'>;
export interface AcsEncodersGetOptions {
}
export type AcsEncodersListParameters = RouteRequestParams<'/acs/encoders/list'>;
/**
 * @deprecated Use AcsEncodersListParameters instead.
 */
export type AcsEncodersListParams = AcsEncodersListParameters;
/**
 * @deprecated Use AcsEncodersListRequest instead.
 */
export type AcsEncodersListResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/list'>>>;
export type AcsEncodersListRequest = SeamHttpRequest<AcsEncodersListResponse, 'acs_encoders'>;
export interface AcsEncodersListOptions {
}
export type AcsEncodersScanCredentialParameters = RouteRequestBody<'/acs/encoders/scan_credential'>;
/**
 * @deprecated Use AcsEncodersScanCredentialParameters instead.
 */
export type AcsEncodersScanCredentialBody = AcsEncodersScanCredentialParameters;
/**
 * @deprecated Use AcsEncodersScanCredentialRequest instead.
 */
export type AcsEncodersScanCredentialResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/scan_credential'>>>;
export type AcsEncodersScanCredentialRequest = SeamHttpRequest<AcsEncodersScanCredentialResponse, 'action_attempt'>;
export type AcsEncodersScanCredentialOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
