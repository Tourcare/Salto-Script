import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../../lib/types.js';
export declare class SeamHttpAcsEncodersSimulate {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsEncodersSimulate;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsEncodersSimulate;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsEncodersSimulate;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsEncodersSimulate>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsEncodersSimulate;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsEncodersSimulate;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    nextCredentialEncodeWillFail(parameters?: AcsEncodersSimulateNextCredentialEncodeWillFailParameters, options?: AcsEncodersSimulateNextCredentialEncodeWillFailOptions): AcsEncodersSimulateNextCredentialEncodeWillFailRequest;
    nextCredentialEncodeWillSucceed(parameters?: AcsEncodersSimulateNextCredentialEncodeWillSucceedParameters, options?: AcsEncodersSimulateNextCredentialEncodeWillSucceedOptions): AcsEncodersSimulateNextCredentialEncodeWillSucceedRequest;
    nextCredentialScanWillFail(parameters?: AcsEncodersSimulateNextCredentialScanWillFailParameters, options?: AcsEncodersSimulateNextCredentialScanWillFailOptions): AcsEncodersSimulateNextCredentialScanWillFailRequest;
    nextCredentialScanWillSucceed(parameters?: AcsEncodersSimulateNextCredentialScanWillSucceedParameters, options?: AcsEncodersSimulateNextCredentialScanWillSucceedOptions): AcsEncodersSimulateNextCredentialScanWillSucceedRequest;
}
export type AcsEncodersSimulateNextCredentialEncodeWillFailParameters = RouteRequestBody<'/acs/encoders/simulate/next_credential_encode_will_fail'>;
/**
 * @deprecated Use AcsEncodersSimulateNextCredentialEncodeWillFailParameters instead.
 */
export type AcsEncodersSimulateNextCredentialEncodeWillFailBody = AcsEncodersSimulateNextCredentialEncodeWillFailParameters;
/**
 * @deprecated Use AcsEncodersSimulateNextCredentialEncodeWillFailRequest instead.
 */
export type AcsEncodersSimulateNextCredentialEncodeWillFailResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/simulate/next_credential_encode_will_fail'>>>;
export type AcsEncodersSimulateNextCredentialEncodeWillFailRequest = SeamHttpRequest<void, undefined>;
export interface AcsEncodersSimulateNextCredentialEncodeWillFailOptions {
}
export type AcsEncodersSimulateNextCredentialEncodeWillSucceedParameters = RouteRequestBody<'/acs/encoders/simulate/next_credential_encode_will_succeed'>;
/**
 * @deprecated Use AcsEncodersSimulateNextCredentialEncodeWillSucceedParameters instead.
 */
export type AcsEncodersSimulateNextCredentialEncodeWillSucceedBody = AcsEncodersSimulateNextCredentialEncodeWillSucceedParameters;
/**
 * @deprecated Use AcsEncodersSimulateNextCredentialEncodeWillSucceedRequest instead.
 */
export type AcsEncodersSimulateNextCredentialEncodeWillSucceedResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/simulate/next_credential_encode_will_succeed'>>>;
export type AcsEncodersSimulateNextCredentialEncodeWillSucceedRequest = SeamHttpRequest<void, undefined>;
export interface AcsEncodersSimulateNextCredentialEncodeWillSucceedOptions {
}
export type AcsEncodersSimulateNextCredentialScanWillFailParameters = RouteRequestBody<'/acs/encoders/simulate/next_credential_scan_will_fail'>;
/**
 * @deprecated Use AcsEncodersSimulateNextCredentialScanWillFailParameters instead.
 */
export type AcsEncodersSimulateNextCredentialScanWillFailBody = AcsEncodersSimulateNextCredentialScanWillFailParameters;
/**
 * @deprecated Use AcsEncodersSimulateNextCredentialScanWillFailRequest instead.
 */
export type AcsEncodersSimulateNextCredentialScanWillFailResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/simulate/next_credential_scan_will_fail'>>>;
export type AcsEncodersSimulateNextCredentialScanWillFailRequest = SeamHttpRequest<void, undefined>;
export interface AcsEncodersSimulateNextCredentialScanWillFailOptions {
}
export type AcsEncodersSimulateNextCredentialScanWillSucceedParameters = RouteRequestBody<'/acs/encoders/simulate/next_credential_scan_will_succeed'>;
/**
 * @deprecated Use AcsEncodersSimulateNextCredentialScanWillSucceedParameters instead.
 */
export type AcsEncodersSimulateNextCredentialScanWillSucceedBody = AcsEncodersSimulateNextCredentialScanWillSucceedParameters;
/**
 * @deprecated Use AcsEncodersSimulateNextCredentialScanWillSucceedRequest instead.
 */
export type AcsEncodersSimulateNextCredentialScanWillSucceedResponse = SetNonNullable<Required<RouteResponse<'/acs/encoders/simulate/next_credential_scan_will_succeed'>>>;
export type AcsEncodersSimulateNextCredentialScanWillSucceedRequest = SeamHttpRequest<void, undefined>;
export interface AcsEncodersSimulateNextCredentialScanWillSucceedOptions {
}
