import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
import { SeamHttpAcsUsersUnmanaged } from './unmanaged/index.js';
export declare class SeamHttpAcsUsers {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsUsers;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsUsers;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsUsers;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsUsers>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsUsers;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsUsers;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get unmanaged(): SeamHttpAcsUsersUnmanaged;
    addToAccessGroup(parameters?: AcsUsersAddToAccessGroupParameters, options?: AcsUsersAddToAccessGroupOptions): AcsUsersAddToAccessGroupRequest;
    create(parameters?: AcsUsersCreateParameters, options?: AcsUsersCreateOptions): AcsUsersCreateRequest;
    delete(parameters?: AcsUsersDeleteParameters, options?: AcsUsersDeleteOptions): AcsUsersDeleteRequest;
    get(parameters?: AcsUsersGetParameters, options?: AcsUsersGetOptions): AcsUsersGetRequest;
    list(parameters?: AcsUsersListParameters, options?: AcsUsersListOptions): AcsUsersListRequest;
    listAccessibleEntrances(parameters?: AcsUsersListAccessibleEntrancesParameters, options?: AcsUsersListAccessibleEntrancesOptions): AcsUsersListAccessibleEntrancesRequest;
    removeFromAccessGroup(parameters?: AcsUsersRemoveFromAccessGroupParameters, options?: AcsUsersRemoveFromAccessGroupOptions): AcsUsersRemoveFromAccessGroupRequest;
    revokeAccessToAllEntrances(parameters?: AcsUsersRevokeAccessToAllEntrancesParameters, options?: AcsUsersRevokeAccessToAllEntrancesOptions): AcsUsersRevokeAccessToAllEntrancesRequest;
    suspend(parameters?: AcsUsersSuspendParameters, options?: AcsUsersSuspendOptions): AcsUsersSuspendRequest;
    unsuspend(parameters?: AcsUsersUnsuspendParameters, options?: AcsUsersUnsuspendOptions): AcsUsersUnsuspendRequest;
    update(parameters?: AcsUsersUpdateParameters, options?: AcsUsersUpdateOptions): AcsUsersUpdateRequest;
}
export type AcsUsersAddToAccessGroupParameters = RouteRequestBody<'/acs/users/add_to_access_group'>;
/**
 * @deprecated Use AcsUsersAddToAccessGroupParameters instead.
 */
export type AcsUsersAddToAccessGroupBody = AcsUsersAddToAccessGroupParameters;
/**
 * @deprecated Use AcsUsersAddToAccessGroupRequest instead.
 */
export type AcsUsersAddToAccessGroupResponse = SetNonNullable<Required<RouteResponse<'/acs/users/add_to_access_group'>>>;
export type AcsUsersAddToAccessGroupRequest = SeamHttpRequest<void, undefined>;
export interface AcsUsersAddToAccessGroupOptions {
}
export type AcsUsersCreateParameters = RouteRequestBody<'/acs/users/create'>;
/**
 * @deprecated Use AcsUsersCreateParameters instead.
 */
export type AcsUsersCreateBody = AcsUsersCreateParameters;
/**
 * @deprecated Use AcsUsersCreateRequest instead.
 */
export type AcsUsersCreateResponse = SetNonNullable<Required<RouteResponse<'/acs/users/create'>>>;
export type AcsUsersCreateRequest = SeamHttpRequest<AcsUsersCreateResponse, 'acs_user'>;
export interface AcsUsersCreateOptions {
}
export type AcsUsersDeleteParameters = RouteRequestBody<'/acs/users/delete'>;
/**
 * @deprecated Use AcsUsersDeleteParameters instead.
 */
export type AcsUsersDeleteParams = AcsUsersDeleteParameters;
/**
 * @deprecated Use AcsUsersDeleteRequest instead.
 */
export type AcsUsersDeleteResponse = SetNonNullable<Required<RouteResponse<'/acs/users/delete'>>>;
export type AcsUsersDeleteRequest = SeamHttpRequest<void, undefined>;
export interface AcsUsersDeleteOptions {
}
export type AcsUsersGetParameters = RouteRequestBody<'/acs/users/get'>;
/**
 * @deprecated Use AcsUsersGetParameters instead.
 */
export type AcsUsersGetParams = AcsUsersGetParameters;
/**
 * @deprecated Use AcsUsersGetRequest instead.
 */
export type AcsUsersGetResponse = SetNonNullable<Required<RouteResponse<'/acs/users/get'>>>;
export type AcsUsersGetRequest = SeamHttpRequest<AcsUsersGetResponse, 'acs_user'>;
export interface AcsUsersGetOptions {
}
export type AcsUsersListParameters = RouteRequestBody<'/acs/users/list'>;
/**
 * @deprecated Use AcsUsersListParameters instead.
 */
export type AcsUsersListParams = AcsUsersListParameters;
/**
 * @deprecated Use AcsUsersListRequest instead.
 */
export type AcsUsersListResponse = SetNonNullable<Required<RouteResponse<'/acs/users/list'>>>;
export type AcsUsersListRequest = SeamHttpRequest<AcsUsersListResponse, 'acs_users'>;
export interface AcsUsersListOptions {
}
export type AcsUsersListAccessibleEntrancesParameters = RouteRequestBody<'/acs/users/list_accessible_entrances'>;
/**
 * @deprecated Use AcsUsersListAccessibleEntrancesParameters instead.
 */
export type AcsUsersListAccessibleEntrancesParams = AcsUsersListAccessibleEntrancesParameters;
/**
 * @deprecated Use AcsUsersListAccessibleEntrancesRequest instead.
 */
export type AcsUsersListAccessibleEntrancesResponse = SetNonNullable<Required<RouteResponse<'/acs/users/list_accessible_entrances'>>>;
export type AcsUsersListAccessibleEntrancesRequest = SeamHttpRequest<AcsUsersListAccessibleEntrancesResponse, 'acs_entrances'>;
export interface AcsUsersListAccessibleEntrancesOptions {
}
export type AcsUsersRemoveFromAccessGroupParameters = RouteRequestBody<'/acs/users/remove_from_access_group'>;
/**
 * @deprecated Use AcsUsersRemoveFromAccessGroupParameters instead.
 */
export type AcsUsersRemoveFromAccessGroupParams = AcsUsersRemoveFromAccessGroupParameters;
/**
 * @deprecated Use AcsUsersRemoveFromAccessGroupRequest instead.
 */
export type AcsUsersRemoveFromAccessGroupResponse = SetNonNullable<Required<RouteResponse<'/acs/users/remove_from_access_group'>>>;
export type AcsUsersRemoveFromAccessGroupRequest = SeamHttpRequest<void, undefined>;
export interface AcsUsersRemoveFromAccessGroupOptions {
}
export type AcsUsersRevokeAccessToAllEntrancesParameters = RouteRequestBody<'/acs/users/revoke_access_to_all_entrances'>;
/**
 * @deprecated Use AcsUsersRevokeAccessToAllEntrancesParameters instead.
 */
export type AcsUsersRevokeAccessToAllEntrancesBody = AcsUsersRevokeAccessToAllEntrancesParameters;
/**
 * @deprecated Use AcsUsersRevokeAccessToAllEntrancesRequest instead.
 */
export type AcsUsersRevokeAccessToAllEntrancesResponse = SetNonNullable<Required<RouteResponse<'/acs/users/revoke_access_to_all_entrances'>>>;
export type AcsUsersRevokeAccessToAllEntrancesRequest = SeamHttpRequest<void, undefined>;
export interface AcsUsersRevokeAccessToAllEntrancesOptions {
}
export type AcsUsersSuspendParameters = RouteRequestBody<'/acs/users/suspend'>;
/**
 * @deprecated Use AcsUsersSuspendParameters instead.
 */
export type AcsUsersSuspendBody = AcsUsersSuspendParameters;
/**
 * @deprecated Use AcsUsersSuspendRequest instead.
 */
export type AcsUsersSuspendResponse = SetNonNullable<Required<RouteResponse<'/acs/users/suspend'>>>;
export type AcsUsersSuspendRequest = SeamHttpRequest<void, undefined>;
export interface AcsUsersSuspendOptions {
}
export type AcsUsersUnsuspendParameters = RouteRequestBody<'/acs/users/unsuspend'>;
/**
 * @deprecated Use AcsUsersUnsuspendParameters instead.
 */
export type AcsUsersUnsuspendBody = AcsUsersUnsuspendParameters;
/**
 * @deprecated Use AcsUsersUnsuspendRequest instead.
 */
export type AcsUsersUnsuspendResponse = SetNonNullable<Required<RouteResponse<'/acs/users/unsuspend'>>>;
export type AcsUsersUnsuspendRequest = SeamHttpRequest<void, undefined>;
export interface AcsUsersUnsuspendOptions {
}
export type AcsUsersUpdateParameters = RouteRequestBody<'/acs/users/update'>;
/**
 * @deprecated Use AcsUsersUpdateParameters instead.
 */
export type AcsUsersUpdateBody = AcsUsersUpdateParameters;
/**
 * @deprecated Use AcsUsersUpdateRequest instead.
 */
export type AcsUsersUpdateResponse = SetNonNullable<Required<RouteResponse<'/acs/users/update'>>>;
export type AcsUsersUpdateRequest = SeamHttpRequest<void, undefined>;
export interface AcsUsersUpdateOptions {
}
