import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpAcsSystems {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsSystems;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsSystems;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsSystems;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsSystems>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsSystems;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsSystems;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get(parameters?: AcsSystemsGetParameters, options?: AcsSystemsGetOptions): AcsSystemsGetRequest;
    list(parameters?: AcsSystemsListParameters, options?: AcsSystemsListOptions): AcsSystemsListRequest;
    listCompatibleCredentialManagerAcsSystems(parameters?: AcsSystemsListCompatibleCredentialManagerAcsSystemsParameters, options?: AcsSystemsListCompatibleCredentialManagerAcsSystemsOptions): AcsSystemsListCompatibleCredentialManagerAcsSystemsRequest;
}
export type AcsSystemsGetParameters = RouteRequestBody<'/acs/systems/get'>;
/**
 * @deprecated Use AcsSystemsGetParameters instead.
 */
export type AcsSystemsGetParams = AcsSystemsGetParameters;
/**
 * @deprecated Use AcsSystemsGetRequest instead.
 */
export type AcsSystemsGetResponse = SetNonNullable<Required<RouteResponse<'/acs/systems/get'>>>;
export type AcsSystemsGetRequest = SeamHttpRequest<AcsSystemsGetResponse, 'acs_system'>;
export interface AcsSystemsGetOptions {
}
export type AcsSystemsListParameters = RouteRequestBody<'/acs/systems/list'>;
/**
 * @deprecated Use AcsSystemsListParameters instead.
 */
export type AcsSystemsListParams = AcsSystemsListParameters;
/**
 * @deprecated Use AcsSystemsListRequest instead.
 */
export type AcsSystemsListResponse = SetNonNullable<Required<RouteResponse<'/acs/systems/list'>>>;
export type AcsSystemsListRequest = SeamHttpRequest<AcsSystemsListResponse, 'acs_systems'>;
export interface AcsSystemsListOptions {
}
export type AcsSystemsListCompatibleCredentialManagerAcsSystemsParameters = RouteRequestBody<'/acs/systems/list_compatible_credential_manager_acs_systems'>;
/**
 * @deprecated Use AcsSystemsListCompatibleCredentialManagerAcsSystemsParameters instead.
 */
export type AcsSystemsListCompatibleCredentialManagerAcsSystemsParams = AcsSystemsListCompatibleCredentialManagerAcsSystemsParameters;
/**
 * @deprecated Use AcsSystemsListCompatibleCredentialManagerAcsSystemsRequest instead.
 */
export type AcsSystemsListCompatibleCredentialManagerAcsSystemsResponse = SetNonNullable<Required<RouteResponse<'/acs/systems/list_compatible_credential_manager_acs_systems'>>>;
export type AcsSystemsListCompatibleCredentialManagerAcsSystemsRequest = SeamHttpRequest<AcsSystemsListCompatibleCredentialManagerAcsSystemsResponse, 'acs_systems'>;
export interface AcsSystemsListCompatibleCredentialManagerAcsSystemsOptions {
}
