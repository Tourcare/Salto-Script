import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../../lib/types.js';
export declare class SeamHttpAcsUsersUnmanaged {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsUsersUnmanaged;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsUsersUnmanaged;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsUsersUnmanaged;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsUsersUnmanaged>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsUsersUnmanaged;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsUsersUnmanaged;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get(parameters?: AcsUsersUnmanagedGetParameters, options?: AcsUsersUnmanagedGetOptions): AcsUsersUnmanagedGetRequest;
    list(parameters?: AcsUsersUnmanagedListParameters, options?: AcsUsersUnmanagedListOptions): AcsUsersUnmanagedListRequest;
}
export type AcsUsersUnmanagedGetParameters = RouteRequestBody<'/acs/users/unmanaged/get'>;
/**
 * @deprecated Use AcsUsersUnmanagedGetParameters instead.
 */
export type AcsUsersUnmanagedGetParams = AcsUsersUnmanagedGetParameters;
/**
 * @deprecated Use AcsUsersUnmanagedGetRequest instead.
 */
export type AcsUsersUnmanagedGetResponse = SetNonNullable<Required<RouteResponse<'/acs/users/unmanaged/get'>>>;
export type AcsUsersUnmanagedGetRequest = SeamHttpRequest<AcsUsersUnmanagedGetResponse, 'acs_user'>;
export interface AcsUsersUnmanagedGetOptions {
}
export type AcsUsersUnmanagedListParameters = RouteRequestBody<'/acs/users/unmanaged/list'>;
/**
 * @deprecated Use AcsUsersUnmanagedListParameters instead.
 */
export type AcsUsersUnmanagedListParams = AcsUsersUnmanagedListParameters;
/**
 * @deprecated Use AcsUsersUnmanagedListRequest instead.
 */
export type AcsUsersUnmanagedListResponse = SetNonNullable<Required<RouteResponse<'/acs/users/unmanaged/list'>>>;
export type AcsUsersUnmanagedListRequest = SeamHttpRequest<AcsUsersUnmanagedListResponse, 'acs_users'>;
export interface AcsUsersUnmanagedListOptions {
}
