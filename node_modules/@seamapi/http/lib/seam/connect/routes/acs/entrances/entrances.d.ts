import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpAcsEntrances {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpAcsEntrances;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpAcsEntrances;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpAcsEntrances;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpAcsEntrances>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpAcsEntrances;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpAcsEntrances;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get(parameters?: AcsEntrancesGetParameters, options?: AcsEntrancesGetOptions): AcsEntrancesGetRequest;
    grantAccess(parameters?: AcsEntrancesGrantAccessParameters, options?: AcsEntrancesGrantAccessOptions): AcsEntrancesGrantAccessRequest;
    list(parameters?: AcsEntrancesListParameters, options?: AcsEntrancesListOptions): AcsEntrancesListRequest;
    listCredentialsWithAccess(parameters?: AcsEntrancesListCredentialsWithAccessParameters, options?: AcsEntrancesListCredentialsWithAccessOptions): AcsEntrancesListCredentialsWithAccessRequest;
}
export type AcsEntrancesGetParameters = RouteRequestBody<'/acs/entrances/get'>;
/**
 * @deprecated Use AcsEntrancesGetParameters instead.
 */
export type AcsEntrancesGetParams = AcsEntrancesGetParameters;
/**
 * @deprecated Use AcsEntrancesGetRequest instead.
 */
export type AcsEntrancesGetResponse = SetNonNullable<Required<RouteResponse<'/acs/entrances/get'>>>;
export type AcsEntrancesGetRequest = SeamHttpRequest<AcsEntrancesGetResponse, 'acs_entrance'>;
export interface AcsEntrancesGetOptions {
}
export type AcsEntrancesGrantAccessParameters = RouteRequestBody<'/acs/entrances/grant_access'>;
/**
 * @deprecated Use AcsEntrancesGrantAccessParameters instead.
 */
export type AcsEntrancesGrantAccessBody = AcsEntrancesGrantAccessParameters;
/**
 * @deprecated Use AcsEntrancesGrantAccessRequest instead.
 */
export type AcsEntrancesGrantAccessResponse = SetNonNullable<Required<RouteResponse<'/acs/entrances/grant_access'>>>;
export type AcsEntrancesGrantAccessRequest = SeamHttpRequest<void, undefined>;
export interface AcsEntrancesGrantAccessOptions {
}
export type AcsEntrancesListParameters = RouteRequestBody<'/acs/entrances/list'>;
/**
 * @deprecated Use AcsEntrancesListParameters instead.
 */
export type AcsEntrancesListParams = AcsEntrancesListParameters;
/**
 * @deprecated Use AcsEntrancesListRequest instead.
 */
export type AcsEntrancesListResponse = SetNonNullable<Required<RouteResponse<'/acs/entrances/list'>>>;
export type AcsEntrancesListRequest = SeamHttpRequest<AcsEntrancesListResponse, 'acs_entrances'>;
export interface AcsEntrancesListOptions {
}
export type AcsEntrancesListCredentialsWithAccessParameters = RouteRequestBody<'/acs/entrances/list_credentials_with_access'>;
/**
 * @deprecated Use AcsEntrancesListCredentialsWithAccessParameters instead.
 */
export type AcsEntrancesListCredentialsWithAccessParams = AcsEntrancesListCredentialsWithAccessParameters;
/**
 * @deprecated Use AcsEntrancesListCredentialsWithAccessRequest instead.
 */
export type AcsEntrancesListCredentialsWithAccessResponse = SetNonNullable<Required<RouteResponse<'/acs/entrances/list_credentials_with_access'>>>;
export type AcsEntrancesListCredentialsWithAccessRequest = SeamHttpRequest<AcsEntrancesListCredentialsWithAccessResponse, 'acs_credentials'>;
export interface AcsEntrancesListCredentialsWithAccessOptions {
}
