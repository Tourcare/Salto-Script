import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
export declare class SeamHttpConnectWebviews {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpConnectWebviews;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpConnectWebviews;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpConnectWebviews;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpConnectWebviews>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpConnectWebviews;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpConnectWebviews;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    create(parameters?: ConnectWebviewsCreateParameters, options?: ConnectWebviewsCreateOptions): ConnectWebviewsCreateRequest;
    delete(parameters?: ConnectWebviewsDeleteParameters, options?: ConnectWebviewsDeleteOptions): ConnectWebviewsDeleteRequest;
    get(parameters?: ConnectWebviewsGetParameters, options?: ConnectWebviewsGetOptions): ConnectWebviewsGetRequest;
    list(parameters?: ConnectWebviewsListParameters, options?: ConnectWebviewsListOptions): ConnectWebviewsListRequest;
}
export type ConnectWebviewsCreateParameters = RouteRequestBody<'/connect_webviews/create'>;
/**
 * @deprecated Use ConnectWebviewsCreateParameters instead.
 */
export type ConnectWebviewsCreateBody = ConnectWebviewsCreateParameters;
/**
 * @deprecated Use ConnectWebviewsCreateRequest instead.
 */
export type ConnectWebviewsCreateResponse = SetNonNullable<Required<RouteResponse<'/connect_webviews/create'>>>;
export type ConnectWebviewsCreateRequest = SeamHttpRequest<ConnectWebviewsCreateResponse, 'connect_webview'>;
export interface ConnectWebviewsCreateOptions {
}
export type ConnectWebviewsDeleteParameters = RouteRequestBody<'/connect_webviews/delete'>;
/**
 * @deprecated Use ConnectWebviewsDeleteParameters instead.
 */
export type ConnectWebviewsDeleteParams = ConnectWebviewsDeleteParameters;
/**
 * @deprecated Use ConnectWebviewsDeleteRequest instead.
 */
export type ConnectWebviewsDeleteResponse = SetNonNullable<Required<RouteResponse<'/connect_webviews/delete'>>>;
export type ConnectWebviewsDeleteRequest = SeamHttpRequest<void, undefined>;
export interface ConnectWebviewsDeleteOptions {
}
export type ConnectWebviewsGetParameters = RouteRequestBody<'/connect_webviews/get'>;
/**
 * @deprecated Use ConnectWebviewsGetParameters instead.
 */
export type ConnectWebviewsGetParams = ConnectWebviewsGetParameters;
/**
 * @deprecated Use ConnectWebviewsGetRequest instead.
 */
export type ConnectWebviewsGetResponse = SetNonNullable<Required<RouteResponse<'/connect_webviews/get'>>>;
export type ConnectWebviewsGetRequest = SeamHttpRequest<ConnectWebviewsGetResponse, 'connect_webview'>;
export interface ConnectWebviewsGetOptions {
}
export type ConnectWebviewsListParameters = RouteRequestBody<'/connect_webviews/list'>;
/**
 * @deprecated Use ConnectWebviewsListParameters instead.
 */
export type ConnectWebviewsListParams = ConnectWebviewsListParameters;
/**
 * @deprecated Use ConnectWebviewsListRequest instead.
 */
export type ConnectWebviewsListResponse = SetNonNullable<Required<RouteResponse<'/connect_webviews/list'>>>;
export type ConnectWebviewsListRequest = SeamHttpRequest<ConnectWebviewsListResponse, 'connect_webviews'>;
export interface ConnectWebviewsListOptions {
}
