import type { RouteRequestBody, RouteRequestParams, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
export declare class SeamHttpSpaces {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpSpaces;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpSpaces;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpSpaces;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpSpaces>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpSpaces;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpSpaces;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    addAcsEntrances(parameters?: SpacesAddAcsEntrancesParameters, options?: SpacesAddAcsEntrancesOptions): SpacesAddAcsEntrancesRequest;
    addDevices(parameters?: SpacesAddDevicesParameters, options?: SpacesAddDevicesOptions): SpacesAddDevicesRequest;
    create(parameters?: SpacesCreateParameters, options?: SpacesCreateOptions): SpacesCreateRequest;
    delete(parameters?: SpacesDeleteParameters, options?: SpacesDeleteOptions): SpacesDeleteRequest;
    get(parameters?: SpacesGetParameters, options?: SpacesGetOptions): SpacesGetRequest;
    getRelated(parameters?: SpacesGetRelatedParameters, options?: SpacesGetRelatedOptions): SpacesGetRelatedRequest;
    list(parameters?: SpacesListParameters, options?: SpacesListOptions): SpacesListRequest;
    removeAcsEntrances(parameters?: SpacesRemoveAcsEntrancesParameters, options?: SpacesRemoveAcsEntrancesOptions): SpacesRemoveAcsEntrancesRequest;
    removeDevices(parameters?: SpacesRemoveDevicesParameters, options?: SpacesRemoveDevicesOptions): SpacesRemoveDevicesRequest;
    update(parameters?: SpacesUpdateParameters, options?: SpacesUpdateOptions): SpacesUpdateRequest;
}
export type SpacesAddAcsEntrancesParameters = RouteRequestBody<'/spaces/add_acs_entrances'>;
/**
 * @deprecated Use SpacesAddAcsEntrancesParameters instead.
 */
export type SpacesAddAcsEntrancesBody = SpacesAddAcsEntrancesParameters;
/**
 * @deprecated Use SpacesAddAcsEntrancesRequest instead.
 */
export type SpacesAddAcsEntrancesResponse = SetNonNullable<Required<RouteResponse<'/spaces/add_acs_entrances'>>>;
export type SpacesAddAcsEntrancesRequest = SeamHttpRequest<void, undefined>;
export interface SpacesAddAcsEntrancesOptions {
}
export type SpacesAddDevicesParameters = RouteRequestBody<'/spaces/add_devices'>;
/**
 * @deprecated Use SpacesAddDevicesParameters instead.
 */
export type SpacesAddDevicesBody = SpacesAddDevicesParameters;
/**
 * @deprecated Use SpacesAddDevicesRequest instead.
 */
export type SpacesAddDevicesResponse = SetNonNullable<Required<RouteResponse<'/spaces/add_devices'>>>;
export type SpacesAddDevicesRequest = SeamHttpRequest<void, undefined>;
export interface SpacesAddDevicesOptions {
}
export type SpacesCreateParameters = RouteRequestBody<'/spaces/create'>;
/**
 * @deprecated Use SpacesCreateParameters instead.
 */
export type SpacesCreateBody = SpacesCreateParameters;
/**
 * @deprecated Use SpacesCreateRequest instead.
 */
export type SpacesCreateResponse = SetNonNullable<Required<RouteResponse<'/spaces/create'>>>;
export type SpacesCreateRequest = SeamHttpRequest<SpacesCreateResponse, 'space'>;
export interface SpacesCreateOptions {
}
export type SpacesDeleteParameters = RouteRequestBody<'/spaces/delete'>;
/**
 * @deprecated Use SpacesDeleteParameters instead.
 */
export type SpacesDeleteParams = SpacesDeleteParameters;
/**
 * @deprecated Use SpacesDeleteRequest instead.
 */
export type SpacesDeleteResponse = SetNonNullable<Required<RouteResponse<'/spaces/delete'>>>;
export type SpacesDeleteRequest = SeamHttpRequest<void, undefined>;
export interface SpacesDeleteOptions {
}
export type SpacesGetParameters = RouteRequestParams<'/spaces/get'>;
/**
 * @deprecated Use SpacesGetParameters instead.
 */
export type SpacesGetParams = SpacesGetParameters;
/**
 * @deprecated Use SpacesGetRequest instead.
 */
export type SpacesGetResponse = SetNonNullable<Required<RouteResponse<'/spaces/get'>>>;
export type SpacesGetRequest = SeamHttpRequest<SpacesGetResponse, 'space'>;
export interface SpacesGetOptions {
}
export type SpacesGetRelatedParameters = RouteRequestBody<'/spaces/get_related'>;
/**
 * @deprecated Use SpacesGetRelatedParameters instead.
 */
export type SpacesGetRelatedParams = SpacesGetRelatedParameters;
/**
 * @deprecated Use SpacesGetRelatedRequest instead.
 */
export type SpacesGetRelatedResponse = SetNonNullable<Required<RouteResponse<'/spaces/get_related'>>>;
export type SpacesGetRelatedRequest = SeamHttpRequest<SpacesGetRelatedResponse, 'batch'>;
export interface SpacesGetRelatedOptions {
}
export type SpacesListParameters = RouteRequestBody<'/spaces/list'>;
/**
 * @deprecated Use SpacesListParameters instead.
 */
export type SpacesListParams = SpacesListParameters;
/**
 * @deprecated Use SpacesListRequest instead.
 */
export type SpacesListResponse = SetNonNullable<Required<RouteResponse<'/spaces/list'>>>;
export type SpacesListRequest = SeamHttpRequest<SpacesListResponse, 'spaces'>;
export interface SpacesListOptions {
}
export type SpacesRemoveAcsEntrancesParameters = RouteRequestBody<'/spaces/remove_acs_entrances'>;
/**
 * @deprecated Use SpacesRemoveAcsEntrancesParameters instead.
 */
export type SpacesRemoveAcsEntrancesParams = SpacesRemoveAcsEntrancesParameters;
/**
 * @deprecated Use SpacesRemoveAcsEntrancesRequest instead.
 */
export type SpacesRemoveAcsEntrancesResponse = SetNonNullable<Required<RouteResponse<'/spaces/remove_acs_entrances'>>>;
export type SpacesRemoveAcsEntrancesRequest = SeamHttpRequest<void, undefined>;
export interface SpacesRemoveAcsEntrancesOptions {
}
export type SpacesRemoveDevicesParameters = RouteRequestBody<'/spaces/remove_devices'>;
/**
 * @deprecated Use SpacesRemoveDevicesParameters instead.
 */
export type SpacesRemoveDevicesParams = SpacesRemoveDevicesParameters;
/**
 * @deprecated Use SpacesRemoveDevicesRequest instead.
 */
export type SpacesRemoveDevicesResponse = SetNonNullable<Required<RouteResponse<'/spaces/remove_devices'>>>;
export type SpacesRemoveDevicesRequest = SeamHttpRequest<void, undefined>;
export interface SpacesRemoveDevicesOptions {
}
export type SpacesUpdateParameters = RouteRequestBody<'/spaces/update'>;
/**
 * @deprecated Use SpacesUpdateParameters instead.
 */
export type SpacesUpdateBody = SpacesUpdateParameters;
/**
 * @deprecated Use SpacesUpdateRequest instead.
 */
export type SpacesUpdateResponse = SetNonNullable<Required<RouteResponse<'/spaces/update'>>>;
export type SpacesUpdateRequest = SeamHttpRequest<SpacesUpdateResponse, 'space'>;
export interface SpacesUpdateOptions {
}
