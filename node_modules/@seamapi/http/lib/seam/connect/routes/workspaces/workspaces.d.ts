import type { RouteRequestBody, RouteRequestParams, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
import { SeamHttpWorkspacesCustomizationProfiles } from './customization-profiles/index.js';
export declare class SeamHttpWorkspaces {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpWorkspaces;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpWorkspaces;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpWorkspaces;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpWorkspaces>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpWorkspaces;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpWorkspaces;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get customizationProfiles(): SeamHttpWorkspacesCustomizationProfiles;
    create(parameters?: WorkspacesCreateParameters, options?: WorkspacesCreateOptions): WorkspacesCreateRequest;
    findAnything(parameters?: WorkspacesFindAnythingParameters, options?: WorkspacesFindAnythingOptions): WorkspacesFindAnythingRequest;
    get(parameters?: WorkspacesGetParameters, options?: WorkspacesGetOptions): WorkspacesGetRequest;
    list(parameters?: WorkspacesListParameters, options?: WorkspacesListOptions): WorkspacesListRequest;
    resetSandbox(parameters?: WorkspacesResetSandboxParameters, options?: WorkspacesResetSandboxOptions): WorkspacesResetSandboxRequest;
    update(parameters?: WorkspacesUpdateParameters, options?: WorkspacesUpdateOptions): WorkspacesUpdateRequest;
}
export type WorkspacesCreateParameters = RouteRequestBody<'/workspaces/create'>;
/**
 * @deprecated Use WorkspacesCreateParameters instead.
 */
export type WorkspacesCreateBody = WorkspacesCreateParameters;
/**
 * @deprecated Use WorkspacesCreateRequest instead.
 */
export type WorkspacesCreateResponse = SetNonNullable<Required<RouteResponse<'/workspaces/create'>>>;
export type WorkspacesCreateRequest = SeamHttpRequest<WorkspacesCreateResponse, 'workspace'>;
export interface WorkspacesCreateOptions {
}
export type WorkspacesFindAnythingParameters = RouteRequestBody<'/workspaces/find_anything'>;
/**
 * @deprecated Use WorkspacesFindAnythingParameters instead.
 */
export type WorkspacesFindAnythingParams = WorkspacesFindAnythingParameters;
/**
 * @deprecated Use WorkspacesFindAnythingRequest instead.
 */
export type WorkspacesFindAnythingResponse = SetNonNullable<Required<RouteResponse<'/workspaces/find_anything'>>>;
export type WorkspacesFindAnythingRequest = SeamHttpRequest<WorkspacesFindAnythingResponse, 'batch'>;
export interface WorkspacesFindAnythingOptions {
}
export type WorkspacesGetParameters = RouteRequestParams<'/workspaces/get'>;
/**
 * @deprecated Use WorkspacesGetParameters instead.
 */
export type WorkspacesGetParams = WorkspacesGetParameters;
/**
 * @deprecated Use WorkspacesGetRequest instead.
 */
export type WorkspacesGetResponse = SetNonNullable<Required<RouteResponse<'/workspaces/get'>>>;
export type WorkspacesGetRequest = SeamHttpRequest<WorkspacesGetResponse, 'workspace'>;
export interface WorkspacesGetOptions {
}
export type WorkspacesListParameters = RouteRequestParams<'/workspaces/list'>;
/**
 * @deprecated Use WorkspacesListParameters instead.
 */
export type WorkspacesListParams = WorkspacesListParameters;
/**
 * @deprecated Use WorkspacesListRequest instead.
 */
export type WorkspacesListResponse = SetNonNullable<Required<RouteResponse<'/workspaces/list'>>>;
export type WorkspacesListRequest = SeamHttpRequest<WorkspacesListResponse, 'workspaces'>;
export interface WorkspacesListOptions {
}
export type WorkspacesResetSandboxParameters = RouteRequestBody<'/workspaces/reset_sandbox'>;
/**
 * @deprecated Use WorkspacesResetSandboxParameters instead.
 */
export type WorkspacesResetSandboxBody = WorkspacesResetSandboxParameters;
/**
 * @deprecated Use WorkspacesResetSandboxRequest instead.
 */
export type WorkspacesResetSandboxResponse = SetNonNullable<Required<RouteResponse<'/workspaces/reset_sandbox'>>>;
export type WorkspacesResetSandboxRequest = SeamHttpRequest<WorkspacesResetSandboxResponse, 'action_attempt'>;
export type WorkspacesResetSandboxOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type WorkspacesUpdateParameters = RouteRequestBody<'/workspaces/update'>;
/**
 * @deprecated Use WorkspacesUpdateParameters instead.
 */
export type WorkspacesUpdateBody = WorkspacesUpdateParameters;
/**
 * @deprecated Use WorkspacesUpdateRequest instead.
 */
export type WorkspacesUpdateResponse = SetNonNullable<Required<RouteResponse<'/workspaces/update'>>>;
export type WorkspacesUpdateRequest = SeamHttpRequest<void, undefined>;
export interface WorkspacesUpdateOptions {
}
