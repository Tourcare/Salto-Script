import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
import { SeamHttpLocksSimulate } from './simulate/index.js';
export declare class SeamHttpLocks {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpLocks;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpLocks;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpLocks;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpLocks>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpLocks;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpLocks;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get simulate(): SeamHttpLocksSimulate;
    get(parameters?: LocksGetParameters, options?: LocksGetOptions): LocksGetRequest;
    list(parameters?: LocksListParameters, options?: LocksListOptions): LocksListRequest;
    lockDoor(parameters?: LocksLockDoorParameters, options?: LocksLockDoorOptions): LocksLockDoorRequest;
    unlockDoor(parameters?: LocksUnlockDoorParameters, options?: LocksUnlockDoorOptions): LocksUnlockDoorRequest;
}
export type LocksGetParameters = RouteRequestBody<'/locks/get'>;
/**
 * @deprecated Use LocksGetParameters instead.
 */
export type LocksGetParams = LocksGetParameters;
/**
 * @deprecated Use LocksGetRequest instead.
 */
export type LocksGetResponse = SetNonNullable<Required<RouteResponse<'/locks/get'>>>;
export type LocksGetRequest = SeamHttpRequest<LocksGetResponse, 'device'>;
export interface LocksGetOptions {
}
export type LocksListParameters = RouteRequestBody<'/locks/list'>;
/**
 * @deprecated Use LocksListParameters instead.
 */
export type LocksListParams = LocksListParameters;
/**
 * @deprecated Use LocksListRequest instead.
 */
export type LocksListResponse = SetNonNullable<Required<RouteResponse<'/locks/list'>>>;
export type LocksListRequest = SeamHttpRequest<LocksListResponse, 'devices'>;
export interface LocksListOptions {
}
export type LocksLockDoorParameters = RouteRequestBody<'/locks/lock_door'>;
/**
 * @deprecated Use LocksLockDoorParameters instead.
 */
export type LocksLockDoorBody = LocksLockDoorParameters;
/**
 * @deprecated Use LocksLockDoorRequest instead.
 */
export type LocksLockDoorResponse = SetNonNullable<Required<RouteResponse<'/locks/lock_door'>>>;
export type LocksLockDoorRequest = SeamHttpRequest<LocksLockDoorResponse, 'action_attempt'>;
export type LocksLockDoorOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
export type LocksUnlockDoorParameters = RouteRequestBody<'/locks/unlock_door'>;
/**
 * @deprecated Use LocksUnlockDoorParameters instead.
 */
export type LocksUnlockDoorBody = LocksUnlockDoorParameters;
/**
 * @deprecated Use LocksUnlockDoorRequest instead.
 */
export type LocksUnlockDoorResponse = SetNonNullable<Required<RouteResponse<'/locks/unlock_door'>>>;
export type LocksUnlockDoorRequest = SeamHttpRequest<LocksUnlockDoorResponse, 'action_attempt'>;
export type LocksUnlockDoorOptions = Pick<SeamHttpRequestOptions, 'waitForActionAttempt'>;
