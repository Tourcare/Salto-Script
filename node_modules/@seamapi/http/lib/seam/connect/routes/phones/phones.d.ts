import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
import { SeamHttpPhonesSimulate } from './simulate/index.js';
export declare class SeamHttpPhones {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpPhones;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpPhones;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpPhones;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpPhones>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpPhones;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpPhones;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get simulate(): SeamHttpPhonesSimulate;
    deactivate(parameters?: PhonesDeactivateParameters, options?: PhonesDeactivateOptions): PhonesDeactivateRequest;
    get(parameters?: PhonesGetParameters, options?: PhonesGetOptions): PhonesGetRequest;
    list(parameters?: PhonesListParameters, options?: PhonesListOptions): PhonesListRequest;
}
export type PhonesDeactivateParameters = RouteRequestBody<'/phones/deactivate'>;
/**
 * @deprecated Use PhonesDeactivateParameters instead.
 */
export type PhonesDeactivateParams = PhonesDeactivateParameters;
/**
 * @deprecated Use PhonesDeactivateRequest instead.
 */
export type PhonesDeactivateResponse = SetNonNullable<Required<RouteResponse<'/phones/deactivate'>>>;
export type PhonesDeactivateRequest = SeamHttpRequest<void, undefined>;
export interface PhonesDeactivateOptions {
}
export type PhonesGetParameters = RouteRequestBody<'/phones/get'>;
/**
 * @deprecated Use PhonesGetParameters instead.
 */
export type PhonesGetParams = PhonesGetParameters;
/**
 * @deprecated Use PhonesGetRequest instead.
 */
export type PhonesGetResponse = SetNonNullable<Required<RouteResponse<'/phones/get'>>>;
export type PhonesGetRequest = SeamHttpRequest<PhonesGetResponse, 'phone'>;
export interface PhonesGetOptions {
}
export type PhonesListParameters = RouteRequestBody<'/phones/list'>;
/**
 * @deprecated Use PhonesListParameters instead.
 */
export type PhonesListParams = PhonesListParameters;
/**
 * @deprecated Use PhonesListRequest instead.
 */
export type PhonesListResponse = SetNonNullable<Required<RouteResponse<'/phones/list'>>>;
export type PhonesListRequest = SeamHttpRequest<PhonesListResponse, 'phones'>;
export interface PhonesListOptions {
}
