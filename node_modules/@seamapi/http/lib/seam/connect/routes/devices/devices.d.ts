import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
import { SeamHttpDevicesSimulate } from './simulate/index.js';
import { SeamHttpDevicesUnmanaged } from './unmanaged/index.js';
export declare class SeamHttpDevices {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpDevices;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpDevices;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpDevices;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpDevices>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpDevices;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpDevices;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get simulate(): SeamHttpDevicesSimulate;
    get unmanaged(): SeamHttpDevicesUnmanaged;
    delete(parameters?: DevicesDeleteParameters, options?: DevicesDeleteOptions): DevicesDeleteRequest;
    get(parameters?: DevicesGetParameters, options?: DevicesGetOptions): DevicesGetRequest;
    list(parameters?: DevicesListParameters, options?: DevicesListOptions): DevicesListRequest;
    listDeviceProviders(parameters?: DevicesListDeviceProvidersParameters, options?: DevicesListDeviceProvidersOptions): DevicesListDeviceProvidersRequest;
    update(parameters?: DevicesUpdateParameters, options?: DevicesUpdateOptions): DevicesUpdateRequest;
}
export type DevicesDeleteParameters = RouteRequestBody<'/devices/delete'>;
/**
 * @deprecated Use DevicesDeleteParameters instead.
 */
export type DevicesDeleteParams = DevicesDeleteParameters;
/**
 * @deprecated Use DevicesDeleteRequest instead.
 */
export type DevicesDeleteResponse = SetNonNullable<Required<RouteResponse<'/devices/delete'>>>;
export type DevicesDeleteRequest = SeamHttpRequest<void, undefined>;
export interface DevicesDeleteOptions {
}
export type DevicesGetParameters = RouteRequestBody<'/devices/get'>;
/**
 * @deprecated Use DevicesGetParameters instead.
 */
export type DevicesGetParams = DevicesGetParameters;
/**
 * @deprecated Use DevicesGetRequest instead.
 */
export type DevicesGetResponse = SetNonNullable<Required<RouteResponse<'/devices/get'>>>;
export type DevicesGetRequest = SeamHttpRequest<DevicesGetResponse, 'device'>;
export interface DevicesGetOptions {
}
export type DevicesListParameters = RouteRequestBody<'/devices/list'>;
/**
 * @deprecated Use DevicesListParameters instead.
 */
export type DevicesListParams = DevicesListParameters;
/**
 * @deprecated Use DevicesListRequest instead.
 */
export type DevicesListResponse = SetNonNullable<Required<RouteResponse<'/devices/list'>>>;
export type DevicesListRequest = SeamHttpRequest<DevicesListResponse, 'devices'>;
export interface DevicesListOptions {
}
export type DevicesListDeviceProvidersParameters = RouteRequestBody<'/devices/list_device_providers'>;
/**
 * @deprecated Use DevicesListDeviceProvidersParameters instead.
 */
export type DevicesListDeviceProvidersParams = DevicesListDeviceProvidersParameters;
/**
 * @deprecated Use DevicesListDeviceProvidersRequest instead.
 */
export type DevicesListDeviceProvidersResponse = SetNonNullable<Required<RouteResponse<'/devices/list_device_providers'>>>;
export type DevicesListDeviceProvidersRequest = SeamHttpRequest<DevicesListDeviceProvidersResponse, 'device_providers'>;
export interface DevicesListDeviceProvidersOptions {
}
export type DevicesUpdateParameters = RouteRequestBody<'/devices/update'>;
/**
 * @deprecated Use DevicesUpdateParameters instead.
 */
export type DevicesUpdateBody = DevicesUpdateParameters;
/**
 * @deprecated Use DevicesUpdateRequest instead.
 */
export type DevicesUpdateResponse = SetNonNullable<Required<RouteResponse<'/devices/update'>>>;
export type DevicesUpdateRequest = SeamHttpRequest<void, undefined>;
export interface DevicesUpdateOptions {
}
