import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpDevicesSimulate {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpDevicesSimulate;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpDevicesSimulate;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpDevicesSimulate;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpDevicesSimulate>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpDevicesSimulate;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpDevicesSimulate;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    connect(parameters?: DevicesSimulateConnectParameters, options?: DevicesSimulateConnectOptions): DevicesSimulateConnectRequest;
    connectToHub(parameters?: DevicesSimulateConnectToHubParameters, options?: DevicesSimulateConnectToHubOptions): DevicesSimulateConnectToHubRequest;
    disconnect(parameters?: DevicesSimulateDisconnectParameters, options?: DevicesSimulateDisconnectOptions): DevicesSimulateDisconnectRequest;
    disconnectFromHub(parameters?: DevicesSimulateDisconnectFromHubParameters, options?: DevicesSimulateDisconnectFromHubOptions): DevicesSimulateDisconnectFromHubRequest;
    paidSubscription(parameters?: DevicesSimulatePaidSubscriptionParameters, options?: DevicesSimulatePaidSubscriptionOptions): DevicesSimulatePaidSubscriptionRequest;
    remove(parameters?: DevicesSimulateRemoveParameters, options?: DevicesSimulateRemoveOptions): DevicesSimulateRemoveRequest;
}
export type DevicesSimulateConnectParameters = RouteRequestBody<'/devices/simulate/connect'>;
/**
 * @deprecated Use DevicesSimulateConnectParameters instead.
 */
export type DevicesSimulateConnectBody = DevicesSimulateConnectParameters;
/**
 * @deprecated Use DevicesSimulateConnectRequest instead.
 */
export type DevicesSimulateConnectResponse = SetNonNullable<Required<RouteResponse<'/devices/simulate/connect'>>>;
export type DevicesSimulateConnectRequest = SeamHttpRequest<void, undefined>;
export interface DevicesSimulateConnectOptions {
}
export type DevicesSimulateConnectToHubParameters = RouteRequestBody<'/devices/simulate/connect_to_hub'>;
/**
 * @deprecated Use DevicesSimulateConnectToHubParameters instead.
 */
export type DevicesSimulateConnectToHubBody = DevicesSimulateConnectToHubParameters;
/**
 * @deprecated Use DevicesSimulateConnectToHubRequest instead.
 */
export type DevicesSimulateConnectToHubResponse = SetNonNullable<Required<RouteResponse<'/devices/simulate/connect_to_hub'>>>;
export type DevicesSimulateConnectToHubRequest = SeamHttpRequest<void, undefined>;
export interface DevicesSimulateConnectToHubOptions {
}
export type DevicesSimulateDisconnectParameters = RouteRequestBody<'/devices/simulate/disconnect'>;
/**
 * @deprecated Use DevicesSimulateDisconnectParameters instead.
 */
export type DevicesSimulateDisconnectBody = DevicesSimulateDisconnectParameters;
/**
 * @deprecated Use DevicesSimulateDisconnectRequest instead.
 */
export type DevicesSimulateDisconnectResponse = SetNonNullable<Required<RouteResponse<'/devices/simulate/disconnect'>>>;
export type DevicesSimulateDisconnectRequest = SeamHttpRequest<void, undefined>;
export interface DevicesSimulateDisconnectOptions {
}
export type DevicesSimulateDisconnectFromHubParameters = RouteRequestBody<'/devices/simulate/disconnect_from_hub'>;
/**
 * @deprecated Use DevicesSimulateDisconnectFromHubParameters instead.
 */
export type DevicesSimulateDisconnectFromHubBody = DevicesSimulateDisconnectFromHubParameters;
/**
 * @deprecated Use DevicesSimulateDisconnectFromHubRequest instead.
 */
export type DevicesSimulateDisconnectFromHubResponse = SetNonNullable<Required<RouteResponse<'/devices/simulate/disconnect_from_hub'>>>;
export type DevicesSimulateDisconnectFromHubRequest = SeamHttpRequest<void, undefined>;
export interface DevicesSimulateDisconnectFromHubOptions {
}
export type DevicesSimulatePaidSubscriptionParameters = RouteRequestBody<'/devices/simulate/paid_subscription'>;
/**
 * @deprecated Use DevicesSimulatePaidSubscriptionParameters instead.
 */
export type DevicesSimulatePaidSubscriptionBody = DevicesSimulatePaidSubscriptionParameters;
/**
 * @deprecated Use DevicesSimulatePaidSubscriptionRequest instead.
 */
export type DevicesSimulatePaidSubscriptionResponse = SetNonNullable<Required<RouteResponse<'/devices/simulate/paid_subscription'>>>;
export type DevicesSimulatePaidSubscriptionRequest = SeamHttpRequest<void, undefined>;
export interface DevicesSimulatePaidSubscriptionOptions {
}
export type DevicesSimulateRemoveParameters = RouteRequestBody<'/devices/simulate/remove'>;
/**
 * @deprecated Use DevicesSimulateRemoveParameters instead.
 */
export type DevicesSimulateRemoveBody = DevicesSimulateRemoveParameters;
/**
 * @deprecated Use DevicesSimulateRemoveRequest instead.
 */
export type DevicesSimulateRemoveResponse = SetNonNullable<Required<RouteResponse<'/devices/simulate/remove'>>>;
export type DevicesSimulateRemoveRequest = SeamHttpRequest<void, undefined>;
export interface DevicesSimulateRemoveOptions {
}
