import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../lib/types.js';
export declare class SeamHttpDevicesUnmanaged {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpDevicesUnmanaged;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpDevicesUnmanaged;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpDevicesUnmanaged;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpDevicesUnmanaged>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpDevicesUnmanaged;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpDevicesUnmanaged;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get(parameters?: DevicesUnmanagedGetParameters, options?: DevicesUnmanagedGetOptions): DevicesUnmanagedGetRequest;
    list(parameters?: DevicesUnmanagedListParameters, options?: DevicesUnmanagedListOptions): DevicesUnmanagedListRequest;
    update(parameters?: DevicesUnmanagedUpdateParameters, options?: DevicesUnmanagedUpdateOptions): DevicesUnmanagedUpdateRequest;
}
export type DevicesUnmanagedGetParameters = RouteRequestBody<'/devices/unmanaged/get'>;
/**
 * @deprecated Use DevicesUnmanagedGetParameters instead.
 */
export type DevicesUnmanagedGetParams = DevicesUnmanagedGetParameters;
/**
 * @deprecated Use DevicesUnmanagedGetRequest instead.
 */
export type DevicesUnmanagedGetResponse = SetNonNullable<Required<RouteResponse<'/devices/unmanaged/get'>>>;
export type DevicesUnmanagedGetRequest = SeamHttpRequest<DevicesUnmanagedGetResponse, 'device'>;
export interface DevicesUnmanagedGetOptions {
}
export type DevicesUnmanagedListParameters = RouteRequestBody<'/devices/unmanaged/list'>;
/**
 * @deprecated Use DevicesUnmanagedListParameters instead.
 */
export type DevicesUnmanagedListParams = DevicesUnmanagedListParameters;
/**
 * @deprecated Use DevicesUnmanagedListRequest instead.
 */
export type DevicesUnmanagedListResponse = SetNonNullable<Required<RouteResponse<'/devices/unmanaged/list'>>>;
export type DevicesUnmanagedListRequest = SeamHttpRequest<DevicesUnmanagedListResponse, 'devices'>;
export interface DevicesUnmanagedListOptions {
}
export type DevicesUnmanagedUpdateParameters = RouteRequestBody<'/devices/unmanaged/update'>;
/**
 * @deprecated Use DevicesUnmanagedUpdateParameters instead.
 */
export type DevicesUnmanagedUpdateBody = DevicesUnmanagedUpdateParameters;
/**
 * @deprecated Use DevicesUnmanagedUpdateRequest instead.
 */
export type DevicesUnmanagedUpdateResponse = SetNonNullable<Required<RouteResponse<'/devices/unmanaged/update'>>>;
export type DevicesUnmanagedUpdateRequest = SeamHttpRequest<void, undefined>;
export interface DevicesUnmanagedUpdateOptions {
}
