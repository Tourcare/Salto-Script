import type { RouteRequestBody, RouteRequestParams, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../../../lib/types.js';
export declare class SeamHttpSeamCustomerV1Automations {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpSeamCustomerV1Automations;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpSeamCustomerV1Automations;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpSeamCustomerV1Automations;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpSeamCustomerV1Automations>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpSeamCustomerV1Automations;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpSeamCustomerV1Automations;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    delete(parameters?: SeamCustomerV1AutomationsDeleteParameters, options?: SeamCustomerV1AutomationsDeleteOptions): SeamCustomerV1AutomationsDeleteRequest;
    get(parameters?: SeamCustomerV1AutomationsGetParameters, options?: SeamCustomerV1AutomationsGetOptions): SeamCustomerV1AutomationsGetRequest;
    update(parameters?: SeamCustomerV1AutomationsUpdateParameters, options?: SeamCustomerV1AutomationsUpdateOptions): SeamCustomerV1AutomationsUpdateRequest;
}
export type SeamCustomerV1AutomationsDeleteParameters = RouteRequestBody<'/seam/customer/v1/automations/delete'>;
/**
 * @deprecated Use SeamCustomerV1AutomationsDeleteParameters instead.
 */
export type SeamCustomerV1AutomationsDeleteParams = SeamCustomerV1AutomationsDeleteParameters;
/**
 * @deprecated Use SeamCustomerV1AutomationsDeleteRequest instead.
 */
export type SeamCustomerV1AutomationsDeleteResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/automations/delete'>>>;
export type SeamCustomerV1AutomationsDeleteRequest = SeamHttpRequest<void, undefined>;
export interface SeamCustomerV1AutomationsDeleteOptions {
}
export type SeamCustomerV1AutomationsGetParameters = RouteRequestParams<'/seam/customer/v1/automations/get'>;
/**
 * @deprecated Use SeamCustomerV1AutomationsGetParameters instead.
 */
export type SeamCustomerV1AutomationsGetParams = SeamCustomerV1AutomationsGetParameters;
/**
 * @deprecated Use SeamCustomerV1AutomationsGetRequest instead.
 */
export type SeamCustomerV1AutomationsGetResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/automations/get'>>>;
export type SeamCustomerV1AutomationsGetRequest = SeamHttpRequest<void, undefined>;
export interface SeamCustomerV1AutomationsGetOptions {
}
export type SeamCustomerV1AutomationsUpdateParameters = RouteRequestBody<'/seam/customer/v1/automations/update'>;
/**
 * @deprecated Use SeamCustomerV1AutomationsUpdateParameters instead.
 */
export type SeamCustomerV1AutomationsUpdateBody = SeamCustomerV1AutomationsUpdateParameters;
/**
 * @deprecated Use SeamCustomerV1AutomationsUpdateRequest instead.
 */
export type SeamCustomerV1AutomationsUpdateResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/automations/update'>>>;
export type SeamCustomerV1AutomationsUpdateRequest = SeamHttpRequest<void, undefined>;
export interface SeamCustomerV1AutomationsUpdateOptions {
}
