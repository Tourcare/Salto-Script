import type { RouteRequestParams, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../../lib/types.js';
import { SeamHttpSeamConsoleV1Timelines } from './timelines/index.js';
export declare class SeamHttpSeamConsoleV1 {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpSeamConsoleV1;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpSeamConsoleV1;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpSeamConsoleV1;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpSeamConsoleV1>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpSeamConsoleV1;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpSeamConsoleV1;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get timelines(): SeamHttpSeamConsoleV1Timelines;
    getResourceLocator(parameters?: SeamConsoleV1GetResourceLocatorParameters, options?: SeamConsoleV1GetResourceLocatorOptions): SeamConsoleV1GetResourceLocatorRequest;
}
export type SeamConsoleV1GetResourceLocatorParameters = RouteRequestParams<'/seam/console/v1/get_resource_locator'>;
/**
 * @deprecated Use SeamConsoleV1GetResourceLocatorParameters instead.
 */
export type SeamConsoleV1GetResourceLocatorParams = SeamConsoleV1GetResourceLocatorParameters;
/**
 * @deprecated Use SeamConsoleV1GetResourceLocatorRequest instead.
 */
export type SeamConsoleV1GetResourceLocatorResponse = SetNonNullable<Required<RouteResponse<'/seam/console/v1/get_resource_locator'>>>;
export type SeamConsoleV1GetResourceLocatorRequest = SeamHttpRequest<SeamConsoleV1GetResourceLocatorResponse, 'resource_locator'>;
export interface SeamConsoleV1GetResourceLocatorOptions {
}
