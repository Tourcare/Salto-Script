import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../../../../lib/types.js';
export declare class SeamHttpSeamPartnerV1BuildingBlocksSpaces {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpSeamPartnerV1BuildingBlocksSpaces;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpSeamPartnerV1BuildingBlocksSpaces;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpSeamPartnerV1BuildingBlocksSpaces;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpSeamPartnerV1BuildingBlocksSpaces>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpSeamPartnerV1BuildingBlocksSpaces;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpSeamPartnerV1BuildingBlocksSpaces;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    autoMap(parameters?: SeamPartnerV1BuildingBlocksSpacesAutoMapParameters, options?: SeamPartnerV1BuildingBlocksSpacesAutoMapOptions): SeamPartnerV1BuildingBlocksSpacesAutoMapRequest;
}
export type SeamPartnerV1BuildingBlocksSpacesAutoMapParameters = RouteRequestBody<'/seam/partner/v1/building_blocks/spaces/auto_map'>;
/**
 * @deprecated Use SeamPartnerV1BuildingBlocksSpacesAutoMapParameters instead.
 */
export type SeamPartnerV1BuildingBlocksSpacesAutoMapParams = SeamPartnerV1BuildingBlocksSpacesAutoMapParameters;
/**
 * @deprecated Use SeamPartnerV1BuildingBlocksSpacesAutoMapRequest instead.
 */
export type SeamPartnerV1BuildingBlocksSpacesAutoMapResponse = SetNonNullable<Required<RouteResponse<'/seam/partner/v1/building_blocks/spaces/auto_map'>>>;
export type SeamPartnerV1BuildingBlocksSpacesAutoMapRequest = SeamHttpRequest<SeamPartnerV1BuildingBlocksSpacesAutoMapResponse, 'spaces'>;
export interface SeamPartnerV1BuildingBlocksSpacesAutoMapOptions {
}
