import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../../../lib/types.js';
export declare class SeamHttpSeamCustomerV1Portals {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpSeamCustomerV1Portals;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpSeamCustomerV1Portals;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpSeamCustomerV1Portals;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpSeamCustomerV1Portals>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpSeamCustomerV1Portals;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpSeamCustomerV1Portals;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get(parameters?: SeamCustomerV1PortalsGetParameters, options?: SeamCustomerV1PortalsGetOptions): SeamCustomerV1PortalsGetRequest;
}
export type SeamCustomerV1PortalsGetParameters = RouteRequestBody<'/seam/customer/v1/portals/get'>;
/**
 * @deprecated Use SeamCustomerV1PortalsGetParameters instead.
 */
export type SeamCustomerV1PortalsGetParams = SeamCustomerV1PortalsGetParameters;
/**
 * @deprecated Use SeamCustomerV1PortalsGetRequest instead.
 */
export type SeamCustomerV1PortalsGetResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/portals/get'>>>;
export type SeamCustomerV1PortalsGetRequest = SeamHttpRequest<SeamCustomerV1PortalsGetResponse, 'customer_portal'>;
export interface SeamCustomerV1PortalsGetOptions {
}
