import type { RouteRequestBody, RouteRequestParams, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
export declare class SeamHttpConnectedAccounts {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpConnectedAccounts;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpConnectedAccounts;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpConnectedAccounts;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpConnectedAccounts>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpConnectedAccounts;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpConnectedAccounts;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    delete(parameters?: ConnectedAccountsDeleteParameters, options?: ConnectedAccountsDeleteOptions): ConnectedAccountsDeleteRequest;
    get(parameters?: ConnectedAccountsGetParameters, options?: ConnectedAccountsGetOptions): ConnectedAccountsGetRequest;
    list(parameters?: ConnectedAccountsListParameters, options?: ConnectedAccountsListOptions): ConnectedAccountsListRequest;
    sync(parameters?: ConnectedAccountsSyncParameters, options?: ConnectedAccountsSyncOptions): ConnectedAccountsSyncRequest;
    update(parameters?: ConnectedAccountsUpdateParameters, options?: ConnectedAccountsUpdateOptions): ConnectedAccountsUpdateRequest;
}
export type ConnectedAccountsDeleteParameters = RouteRequestBody<'/connected_accounts/delete'>;
/**
 * @deprecated Use ConnectedAccountsDeleteParameters instead.
 */
export type ConnectedAccountsDeleteParams = ConnectedAccountsDeleteParameters;
/**
 * @deprecated Use ConnectedAccountsDeleteRequest instead.
 */
export type ConnectedAccountsDeleteResponse = SetNonNullable<Required<RouteResponse<'/connected_accounts/delete'>>>;
export type ConnectedAccountsDeleteRequest = SeamHttpRequest<void, undefined>;
export interface ConnectedAccountsDeleteOptions {
}
export type ConnectedAccountsGetParameters = RouteRequestParams<'/connected_accounts/get'>;
/**
 * @deprecated Use ConnectedAccountsGetParameters instead.
 */
export type ConnectedAccountsGetParams = ConnectedAccountsGetParameters;
/**
 * @deprecated Use ConnectedAccountsGetRequest instead.
 */
export type ConnectedAccountsGetResponse = SetNonNullable<Required<RouteResponse<'/connected_accounts/get'>>>;
export type ConnectedAccountsGetRequest = SeamHttpRequest<ConnectedAccountsGetResponse, 'connected_account'>;
export interface ConnectedAccountsGetOptions {
}
export type ConnectedAccountsListParameters = RouteRequestBody<'/connected_accounts/list'>;
/**
 * @deprecated Use ConnectedAccountsListParameters instead.
 */
export type ConnectedAccountsListParams = ConnectedAccountsListParameters;
/**
 * @deprecated Use ConnectedAccountsListRequest instead.
 */
export type ConnectedAccountsListResponse = SetNonNullable<Required<RouteResponse<'/connected_accounts/list'>>>;
export type ConnectedAccountsListRequest = SeamHttpRequest<ConnectedAccountsListResponse, 'connected_accounts'>;
export interface ConnectedAccountsListOptions {
}
export type ConnectedAccountsSyncParameters = RouteRequestBody<'/connected_accounts/sync'>;
/**
 * @deprecated Use ConnectedAccountsSyncParameters instead.
 */
export type ConnectedAccountsSyncBody = ConnectedAccountsSyncParameters;
/**
 * @deprecated Use ConnectedAccountsSyncRequest instead.
 */
export type ConnectedAccountsSyncResponse = SetNonNullable<Required<RouteResponse<'/connected_accounts/sync'>>>;
export type ConnectedAccountsSyncRequest = SeamHttpRequest<void, undefined>;
export interface ConnectedAccountsSyncOptions {
}
export type ConnectedAccountsUpdateParameters = RouteRequestBody<'/connected_accounts/update'>;
/**
 * @deprecated Use ConnectedAccountsUpdateParameters instead.
 */
export type ConnectedAccountsUpdateBody = ConnectedAccountsUpdateParameters;
/**
 * @deprecated Use ConnectedAccountsUpdateRequest instead.
 */
export type ConnectedAccountsUpdateResponse = SetNonNullable<Required<RouteResponse<'/connected_accounts/update'>>>;
export type ConnectedAccountsUpdateRequest = SeamHttpRequest<void, undefined>;
export interface ConnectedAccountsUpdateOptions {
}
