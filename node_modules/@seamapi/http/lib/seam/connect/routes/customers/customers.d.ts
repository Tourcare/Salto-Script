import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../lib/types.js';
export declare class SeamHttpCustomers {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpCustomers;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpCustomers;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpCustomers;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpCustomers>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpCustomers;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpCustomers;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    createPortal(parameters?: CustomersCreatePortalParameters, options?: CustomersCreatePortalOptions): CustomersCreatePortalRequest;
    deleteData(parameters?: CustomersDeleteDataParameters, options?: CustomersDeleteDataOptions): CustomersDeleteDataRequest;
    pushData(parameters?: CustomersPushDataParameters, options?: CustomersPushDataOptions): CustomersPushDataRequest;
}
export type CustomersCreatePortalParameters = RouteRequestBody<'/customers/create_portal'>;
/**
 * @deprecated Use CustomersCreatePortalParameters instead.
 */
export type CustomersCreatePortalBody = CustomersCreatePortalParameters;
/**
 * @deprecated Use CustomersCreatePortalRequest instead.
 */
export type CustomersCreatePortalResponse = SetNonNullable<Required<RouteResponse<'/customers/create_portal'>>>;
export type CustomersCreatePortalRequest = SeamHttpRequest<CustomersCreatePortalResponse, 'magic_link'>;
export interface CustomersCreatePortalOptions {
}
export type CustomersDeleteDataParameters = RouteRequestBody<'/customers/delete_data'>;
/**
 * @deprecated Use CustomersDeleteDataParameters instead.
 */
export type CustomersDeleteDataParams = CustomersDeleteDataParameters;
/**
 * @deprecated Use CustomersDeleteDataRequest instead.
 */
export type CustomersDeleteDataResponse = SetNonNullable<Required<RouteResponse<'/customers/delete_data'>>>;
export type CustomersDeleteDataRequest = SeamHttpRequest<void, undefined>;
export interface CustomersDeleteDataOptions {
}
export type CustomersPushDataParameters = RouteRequestBody<'/customers/push_data'>;
/**
 * @deprecated Use CustomersPushDataParameters instead.
 */
export type CustomersPushDataBody = CustomersPushDataParameters;
/**
 * @deprecated Use CustomersPushDataRequest instead.
 */
export type CustomersPushDataResponse = SetNonNullable<Required<RouteResponse<'/customers/push_data'>>>;
export type CustomersPushDataRequest = SeamHttpRequest<void, undefined>;
export interface CustomersPushDataOptions {
}
