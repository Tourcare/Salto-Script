{"version":3,"sources":["../src/lib/date.ts","../src/lib/object.ts","../src/lib/serialize.ts"],"names":[],"mappings":"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","file":"index.cjs","sourcesContent":["interface DateLike {\n  toISOString: () => string\n}\n\nexport const isDateLike = (v: unknown): v is DateLike => {\n  if (v == null) return false\n  if (typeof v !== 'object') return false\n  if (\n    v instanceof Date ||\n    Object.prototype.toString.call(v) === '[object Date]'\n  ) {\n    return 'toISOString' in v\n  }\n  return false\n}\n\ninterface TemporalInstantLike {\n  epochMilliseconds: number\n}\n\nexport const isTemporalInstantLike = (v: unknown): v is TemporalInstantLike => {\n  if (v == null) return false\n  if (typeof v !== 'object') return false\n  if (!('epochMilliseconds' in v)) return false\n  try {\n    if (typeof v.epochMilliseconds !== 'number') return false\n    if (isNaN(v.epochMilliseconds)) return false\n    return true\n  } catch {\n    return false\n  }\n}\n","export const isPlainObject = (v: unknown): v is Record<string, unknown> => {\n  if (v == null) return false\n  if (typeof v !== 'object') return false\n  const proto = Object.getPrototypeOf(v)\n  if (proto === null) return true\n  if (proto === Object.prototype) return true\n  return false\n}\n","import { isDateLike, isTemporalInstantLike } from './date.js'\nimport { isPlainObject } from './object.js'\n\nexport type Params = Record<string, unknown>\n\nexport const serializeUrlSearchParams = (params: Params): string => {\n  const searchParams = new URLSearchParams()\n  updateUrlSearchParams(searchParams, params)\n  return searchParams.toString()\n}\n\nexport const updateUrlSearchParams = (\n  searchParams: URLSearchParams,\n  params: Record<string, unknown>,\n): void => {\n  nestedUpdateUrlSearchParams(searchParams, params, [])\n  searchParams.sort()\n}\n\nconst nestedUpdateUrlSearchParams = (\n  searchParams: URLSearchParams,\n  params: Record<string, unknown>,\n  path: string[],\n): void => {\n  for (const [key, value] of Object.entries(params)) {\n    if (key.includes('.')) {\n      throw new UnserializableParamError(\n        key,\n        'contains one or more dots \".\" in its name which is unsupported',\n      )\n    }\n\n    const currentPath = [...path, key]\n    if (isPlainObject(value)) {\n      nestedUpdateUrlSearchParams(searchParams, value, currentPath)\n      return\n    }\n\n    const name = currentPath.join('.')\n\n    if (value == null && value !== null) {\n      continue\n    }\n\n    if (Array.isArray(value)) {\n      if (value.length === 0) {\n        searchParams.set(name, '')\n        continue\n      }\n\n      if (value.length === 1 && value[0] === '') {\n        throw new UnserializableParamError(\n          name,\n          'is a single element array containing the empty string which is unsupported',\n        )\n      }\n      if (value.some((v) => v === '')) {\n        throw new UnserializableParamError(\n          name,\n          'is an array containing the empty string which is unsupported',\n        )\n      }\n      if (value.some((v) => v == null)) {\n        throw new UnserializableParamError(\n          name,\n          'is an array containing null or undefined values which is unsupported',\n        )\n      }\n      for (const v of value) {\n        searchParams.append(name, serialize(name, v))\n      }\n      continue\n    }\n\n    searchParams.set(name, serialize(name, value))\n  }\n}\n\nconst serialize = (k: string, v: unknown): string => {\n  if (v === null) return ''\n  if (typeof v === 'string') {\n    if (v.length === 0) {\n      throw new UnserializableParamError(\n        k,\n        'is the empty string which is unsupported',\n      )\n    }\n    return v.toString()\n  }\n  if (typeof v === 'number') {\n    if (\n      isNaN(v) ||\n      v === Infinity ||\n      v === -Infinity ||\n      v.toString() === 'NaN' ||\n      v.toString() === 'Infinity' ||\n      v.toString() === '-Infinity'\n    ) {\n      throw new UnserializableParamError(k, `is ${v}`)\n    }\n    return v.toString()\n  }\n  if (typeof v === 'bigint') return v.toString()\n  if (typeof v === 'boolean') return v.toString()\n  if (isDateLike(v)) return v.toISOString()\n  if (isTemporalInstantLike(v)) {\n    return new Date(v.epochMilliseconds).toISOString()\n  }\n  throw new UnserializableParamError(k, `is a ${typeof v}`)\n}\n\nexport class UnserializableParamError extends Error {\n  constructor(name: string, message: string) {\n    super(`Could not serialize parameter: '${name}' ${message}`)\n    this.name = this.constructor.name\n  }\n}\n"]}