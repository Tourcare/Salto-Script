import { z } from 'zod';
export declare const climate_preset: z.ZodObject<{
    climate_preset_key: z.ZodString;
    can_edit: z.ZodBoolean;
    can_delete: z.ZodBoolean;
    can_use_with_thermostat_daily_programs: z.ZodBoolean;
    name: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>;
    display_name: z.ZodString;
    climate_preset_mode: z.ZodOptional<z.ZodEnum<["home", "away", "wake", "sleep", "occupied", "unoccupied"]>>;
    fan_mode_setting: z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>;
    hvac_mode_setting: z.ZodOptional<z.ZodEnum<["off", "heat", "cool", "heat_cool", "eco"]>>;
    cooling_set_point_celsius: z.ZodOptional<z.ZodNumber>;
    heating_set_point_celsius: z.ZodOptional<z.ZodNumber>;
    cooling_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
    heating_set_point_fahrenheit: z.ZodOptional<z.ZodNumber>;
    manual_override_allowed: z.ZodBoolean;
    ecobee_metadata: z.ZodOptional<z.ZodObject<{
        climate_ref: z.ZodString;
        is_optimized: z.ZodBoolean;
        owner: z.ZodEnum<["user", "system"]>;
    }, "strip", z.ZodTypeAny, {
        climate_ref: string;
        is_optimized: boolean;
        owner: "user" | "system";
    }, {
        climate_ref: string;
        is_optimized: boolean;
        owner: "user" | "system";
    }>>;
}, "strip", z.ZodTypeAny, {
    climate_preset_key: string;
    can_edit: boolean;
    can_delete: boolean;
    can_use_with_thermostat_daily_programs: boolean;
    display_name: string;
    manual_override_allowed: boolean;
    name?: string | null | undefined;
    climate_preset_mode?: "home" | "away" | "wake" | "sleep" | "occupied" | "unoccupied" | undefined;
    fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
    hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | "eco" | undefined;
    cooling_set_point_celsius?: number | undefined;
    heating_set_point_celsius?: number | undefined;
    cooling_set_point_fahrenheit?: number | undefined;
    heating_set_point_fahrenheit?: number | undefined;
    ecobee_metadata?: {
        climate_ref: string;
        is_optimized: boolean;
        owner: "user" | "system";
    } | undefined;
}, {
    climate_preset_key: string;
    can_edit: boolean;
    can_delete: boolean;
    can_use_with_thermostat_daily_programs: boolean;
    display_name: string;
    manual_override_allowed: boolean;
    name?: string | null | undefined;
    climate_preset_mode?: "home" | "away" | "wake" | "sleep" | "occupied" | "unoccupied" | undefined;
    fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
    hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | "eco" | undefined;
    cooling_set_point_celsius?: number | undefined;
    heating_set_point_celsius?: number | undefined;
    cooling_set_point_fahrenheit?: number | undefined;
    heating_set_point_fahrenheit?: number | undefined;
    ecobee_metadata?: {
        climate_ref: string;
        is_optimized: boolean;
        owner: "user" | "system";
    } | undefined;
}>;
export type ClimatePreset = z.infer<typeof climate_preset>;
export declare const climate_setting: z.ZodObject<{
    climate_preset_key: z.ZodOptional<z.ZodString>;
    can_edit: z.ZodOptional<z.ZodBoolean>;
    can_delete: z.ZodOptional<z.ZodBoolean>;
    can_use_with_thermostat_daily_programs: z.ZodOptional<z.ZodBoolean>;
    name: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>>;
    display_name: z.ZodOptional<z.ZodString>;
    climate_preset_mode: z.ZodOptional<z.ZodOptional<z.ZodEnum<["home", "away", "wake", "sleep", "occupied", "unoccupied"]>>>;
    fan_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["auto", "on", "circulate"]>>>;
    hvac_mode_setting: z.ZodOptional<z.ZodOptional<z.ZodEnum<["off", "heat", "cool", "heat_cool", "eco"]>>>;
    cooling_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    heating_set_point_celsius: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    cooling_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    heating_set_point_fahrenheit: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    manual_override_allowed: z.ZodOptional<z.ZodBoolean>;
    ecobee_metadata: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        climate_ref: z.ZodString;
        is_optimized: z.ZodBoolean;
        owner: z.ZodEnum<["user", "system"]>;
    }, "strip", z.ZodTypeAny, {
        climate_ref: string;
        is_optimized: boolean;
        owner: "user" | "system";
    }, {
        climate_ref: string;
        is_optimized: boolean;
        owner: "user" | "system";
    }>>>;
}, "strip", z.ZodTypeAny, {
    climate_preset_key?: string | undefined;
    can_edit?: boolean | undefined;
    can_delete?: boolean | undefined;
    can_use_with_thermostat_daily_programs?: boolean | undefined;
    name?: string | null | undefined;
    display_name?: string | undefined;
    climate_preset_mode?: "home" | "away" | "wake" | "sleep" | "occupied" | "unoccupied" | undefined;
    fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
    hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | "eco" | undefined;
    cooling_set_point_celsius?: number | undefined;
    heating_set_point_celsius?: number | undefined;
    cooling_set_point_fahrenheit?: number | undefined;
    heating_set_point_fahrenheit?: number | undefined;
    manual_override_allowed?: boolean | undefined;
    ecobee_metadata?: {
        climate_ref: string;
        is_optimized: boolean;
        owner: "user" | "system";
    } | undefined;
}, {
    climate_preset_key?: string | undefined;
    can_edit?: boolean | undefined;
    can_delete?: boolean | undefined;
    can_use_with_thermostat_daily_programs?: boolean | undefined;
    name?: string | null | undefined;
    display_name?: string | undefined;
    climate_preset_mode?: "home" | "away" | "wake" | "sleep" | "occupied" | "unoccupied" | undefined;
    fan_mode_setting?: "auto" | "on" | "circulate" | undefined;
    hvac_mode_setting?: "off" | "heat" | "cool" | "heat_cool" | "eco" | undefined;
    cooling_set_point_celsius?: number | undefined;
    heating_set_point_celsius?: number | undefined;
    cooling_set_point_fahrenheit?: number | undefined;
    heating_set_point_fahrenheit?: number | undefined;
    manual_override_allowed?: boolean | undefined;
    ecobee_metadata?: {
        climate_ref: string;
        is_optimized: boolean;
        owner: "user" | "system";
    } | undefined;
}>;
export type ClimateSetting = z.infer<typeof climate_setting>;
