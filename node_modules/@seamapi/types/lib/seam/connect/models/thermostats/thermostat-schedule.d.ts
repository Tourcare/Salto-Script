import { z } from 'zod';
export declare const thermostat_schedule: z.ZodObject<{
    thermostat_schedule_id: z.ZodString;
    device_id: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
    climate_preset_key: z.ZodString;
    max_override_period_minutes: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    starts_at: z.ZodString;
    is_override_allowed: z.ZodOptional<z.ZodBoolean>;
    ends_at: z.ZodString;
    workspace_id: z.ZodString;
    created_at: z.ZodString;
    errors: z.ZodArray<z.ZodObject<{
        error_code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        error_code: string;
    }, {
        message: string;
        error_code: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    climate_preset_key: string;
    name: string | null;
    device_id: string;
    workspace_id: string;
    created_at: string;
    thermostat_schedule_id: string;
    starts_at: string;
    ends_at: string;
    errors: {
        message: string;
        error_code: string;
    }[];
    max_override_period_minutes?: number | null | undefined;
    is_override_allowed?: boolean | undefined;
}, {
    climate_preset_key: string;
    name: string | null;
    device_id: string;
    workspace_id: string;
    created_at: string;
    thermostat_schedule_id: string;
    starts_at: string;
    ends_at: string;
    errors: {
        message: string;
        error_code: string;
    }[];
    max_override_period_minutes?: number | null | undefined;
    is_override_allowed?: boolean | undefined;
}>;
export type ThermostatSchedule = z.infer<typeof thermostat_schedule>;
