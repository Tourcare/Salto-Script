{"version":3,"sources":["../src/lib/seam/devicedb/models/index.ts","../src/lib/seam/devicedb/models/device-capability.ts","../src/lib/seam/devicedb/models/hardware.ts","../src/lib/seam/devicedb/models/image-reference.ts","../src/lib/seam/devicedb/models/manufacturer.ts","../src/lib/seam/devicedb/models/device-model.ts","../src/lib/seam/devicedb/route-specs.ts"],"names":["z"],"mappings":"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","file":"devicedb.cjs","sourcesContent":["export { device_capability_flags } from './device-capability.js'\nexport * from './device-model.js'\nexport * from './image-reference.js'\nexport * from './manufacturer.js'\n","import { z, type ZodLiteral } from 'zod'\n\nexport const device_capability_flags = z\n  .object({\n    can_remotely_unlock: z.boolean(),\n    can_remotely_lock: z.boolean(),\n    can_program_offline_access_codes: z.boolean(),\n    can_program_online_access_codes: z.boolean(),\n    can_hvac_heat: z.boolean(),\n    can_hvac_cool: z.boolean(),\n    can_hvac_heat_cool: z.boolean(),\n    can_turn_off_hvac: z.boolean(),\n  })\n  .partial()\n\nconst device_model_capability_flags_map: Record<\n  keyof z.infer<typeof device_capability_flags>,\n  ZodLiteral<true>\n> = {\n  can_remotely_lock: z.literal(true),\n  can_remotely_unlock: z.literal(true),\n  can_program_offline_access_codes: z.literal(true),\n  can_program_online_access_codes: z.literal(true),\n  can_hvac_heat: z.literal(true),\n  can_hvac_cool: z.literal(true),\n  can_hvac_heat_cool: z.literal(true),\n  can_turn_off_hvac: z.literal(true),\n}\n\nexport const device_model_capability_flags = z\n  .object(device_model_capability_flags_map)\n  .partial()\n","import { z } from 'zod'\n\nexport const hardware = z\n  .object({\n    has_physical_key: z.boolean(),\n  })\n  .partial()\n","import { z } from 'zod'\n\nexport const image_reference = z.object({\n  url: z.string().url(),\n  width: z.number(),\n  height: z.number(),\n})\n\nexport type ImageReference = z.infer<typeof image_reference>\n","import { z } from 'zod'\n\nimport { image_reference } from './image-reference.js'\n\nexport const manufacturer_integration_support_level = z.enum([\n  'stable',\n  'beta',\n  'planned',\n  'unsupported',\n  'inquire',\n])\n\nexport type ManufacturerIntegrationSupportLevel = z.infer<\n  typeof manufacturer_integration_support_level\n>\n\nexport const manufacturer_annotation_code = z.enum(['subscription_required'])\n\nexport type ManufacturerAnnotationCode = z.infer<\n  typeof manufacturer_annotation_code\n>\n\nexport const manufacturer_annotation = z.object({\n  annotation_code: manufacturer_annotation_code,\n  message: z.string().trim().nonempty(),\n})\n\nexport type ManufacturerAnnotation = z.infer<typeof manufacturer_annotation>\n\nexport const manufacturer = z.object({\n  manufacturer_id: z.string().uuid(),\n  display_name: z.string(),\n  logo: image_reference.optional(),\n  /** @deprecated */\n  integration: manufacturer_integration_support_level,\n  integration_support_level: manufacturer_integration_support_level,\n  is_connect_webview_supported: z.boolean(),\n  requires_seam_support_to_add_account: z.boolean(),\n  device_model_count: z.number(),\n  annotations: z.array(manufacturer_annotation),\n  website: z.string().url().optional(),\n  legal_name: z.string().optional(),\n  parent_organization: z.string().optional(),\n  headquarters: z.array(z.string()).optional(),\n  countries_of_origin: z.array(z.string()).optional(),\n  founding_year: z.string().optional(),\n  us_customer_support_tel: z.string().optional(),\n  us_customer_support_email: z.string().email().optional(),\n  us_customer_support_contact_url: z.string().url().optional(),\n  seam_api_guide: z.string().optional(),\n  description: z.string().optional(),\n})\n\nexport type Manufacturer = z.infer<typeof manufacturer>\n","import { z } from 'zod'\n\nimport { device_model_capability_flags } from './device-capability.js'\nimport { hardware } from './hardware.js'\nimport { image_reference } from './image-reference.js'\nimport { manufacturer } from './manufacturer.js'\n\nexport const device_category = z.enum([\n  'smartlock',\n  'sensor',\n  'thermostat',\n  'relay',\n  'intercom',\n  'accessory',\n])\n\nexport type DeviceCategory = z.infer<typeof device_category>\n\nexport const device_connection_type = z.enum([\n  'wifi',\n  'zwave',\n  'zigbee',\n  'unknown',\n])\n\nexport type DeviceConnectionType = z.infer<typeof device_connection_type>\n\nconst smartlock = z\n  .object({\n    main_category: z.literal(device_category.enum.smartlock),\n    physical_properties: z.object({\n      lock_type: z.enum([\n        'deadbolt',\n        'lever',\n        'mortise',\n        'lockbox',\n        'cylinder',\n        'padlock',\n        'locker',\n        'unknown',\n      ]),\n      has_physical_key: z.boolean(),\n      has_camera: z.boolean(),\n    }),\n    software_features: z.object({\n      can_remotely_unlock: z.boolean(),\n      can_program_access_codes: z.boolean(),\n      can_program_access_schedules: z.boolean(),\n      can_program_access_codes_offline: z.boolean(),\n    }),\n  })\n  .merge(\n    device_model_capability_flags.pick({\n      can_remotely_lock: true,\n      can_remotely_unlock: true,\n      can_program_offline_access_codes: true,\n      can_program_online_access_codes: true,\n    }),\n  )\n\nconst sensor = z.object({\n  main_category: z.literal(device_category.enum.sensor),\n  physical_properties: z.object({\n    has_noise_sensor: z.boolean(),\n    has_humidity_sensor: z.boolean(),\n    has_temperature_sensor: z.boolean(),\n    has_occupancy_detection: z.boolean(),\n  }),\n})\n\nexport const thermostat = z\n  .object({\n    main_category: z.literal(device_category.enum.thermostat),\n    physical_properties: z.object({\n      available_modes: z.enum(['heat', 'cool', 'fan', 'eco']).array(),\n      is_heat_pump_compatible: z.boolean(),\n      has_occupancy_detection: z.boolean(),\n      supports_demand_response: z.boolean(),\n      has_humidity_sensor: z.boolean(),\n      has_temperature_sensor: z.boolean(),\n      supports_emergency_heating_mode: z.boolean(),\n    }),\n    software_features: z.object({\n      can_program_climate_schedules: z.boolean(),\n    }),\n  })\n  .merge(\n    device_model_capability_flags.pick({\n      can_hvac_heat: true,\n      can_hvac_cool: true,\n      can_hvac_heat_cool: true,\n      can_turn_off_hvac: true,\n    }),\n  )\n\nexport type ThermostatProperties = z.infer<typeof thermostat>\n\nconst relay = z.object({\n  main_category: z.literal(device_category.enum.relay),\n})\n\nconst intercom = z.object({\n  main_category: z.literal(device_category.enum.intercom),\n  physical_properties: z.object({\n    has_camera: z.boolean(),\n    has_rfid_reader: z.boolean().default(false),\n    has_nfc_reader: z.boolean().default(false),\n    has_wiegand_interface: z.boolean().default(false),\n  }),\n  software_features: z.object({\n    can_remotely_unlock: z.boolean(),\n    can_program_access_codes: z.boolean(),\n    can_unlock_with_face_recognition: z.boolean().default(false),\n    supports_onvif: z.boolean().default(false),\n  }),\n})\n\nconst accessory = z.object({\n  main_category: z.literal(device_category.enum.accessory),\n})\n\nexport const device_model_category_specific_properties = z.discriminatedUnion(\n  'main_category',\n  [smartlock, sensor, thermostat, relay, intercom, accessory],\n)\n\nexport const base_device_model_v1 = z.object({\n  device_model_id: z.string().uuid(),\n  manufacturer: manufacturer.omit({\n    device_model_count: true,\n  }),\n  is_device_supported: z.boolean(),\n  display_name: z.string(),\n  description: z.string(),\n  product_url: z.string().optional(),\n  main_connection_type: device_connection_type,\n  hardware,\n  aesthetic_variants: z\n    .object({\n      slug: z.string(),\n      display_name: z.string(),\n      primary_color_hex: z.string().optional(),\n      manufacturer_sku: z.string().optional(),\n      front_image: image_reference.optional(),\n      back_image: image_reference.optional(),\n      images: image_reference.array(),\n    })\n    .array(),\n  power_sources: z\n    .enum([\n      'battery',\n      'hardwired',\n      'mechanical_harvesting',\n      'wireless',\n      'ethernet',\n    ])\n    .array(),\n})\n\nexport type BaseDeviceModel = z.infer<typeof base_device_model_v1>\n\nexport const device_model_v1 = base_device_model_v1.and(\n  device_model_category_specific_properties,\n)\n\nexport type DeviceModel = z.infer<typeof device_model_v1>\n","import { z } from 'zod'\n\nimport * as schemas from './models/index.js'\n\nconst dot_path = z.string().regex(/^([a-z])[a-z_.]*[a-z]+$/)\n\nexport const routes = {\n  '/api/v1/device_models/get': {\n    auth: 'publishable_key',\n    methods: ['GET', 'OPTIONS'],\n    queryParams: z.object({\n      device_model_id: z.string().uuid(),\n    }),\n    jsonResponse: z.object({\n      device_model: schemas.device_model_v1,\n    }),\n  },\n  '/api/v1/device_models/list': {\n    auth: 'publishable_key',\n    methods: ['GET', 'OPTIONS'],\n    queryParams: z.object({\n      main_category: schemas.device_category.optional(),\n      manufacturer_id: z.string().uuid().optional(),\n      manufacturer_ids: z.string().uuid().array().optional(),\n      /** @deprecated */\n      integration_status: schemas.manufacturer.shape.integration.optional(),\n      integration_support_levels: z\n        .array(schemas.manufacturer_integration_support_level)\n        .optional(),\n      text_search: z.string().optional(),\n      include_if: z.array(dot_path).optional(),\n      exclude_if: z.array(dot_path).optional(),\n    }),\n    jsonResponse: z.object({\n      device_models: schemas.device_model_v1.array(),\n    }),\n  },\n  '/api/v1/manufacturers/get': {\n    auth: 'publishable_key',\n    methods: ['GET', 'OPTIONS'],\n    queryParams: z.object({\n      manufacturer_id: z.string().uuid(),\n    }),\n    jsonResponse: z.object({\n      manufacturer: schemas.manufacturer,\n    }),\n  },\n  '/api/v1/manufacturers/list': {\n    auth: 'publishable_key',\n    methods: ['GET', 'OPTIONS'],\n    queryParams: z.object({\n      /** @deprecated */\n      integration_status: schemas.manufacturer.shape.integration.optional(),\n      integration_support_levels: z\n        .array(schemas.manufacturer_integration_support_level)\n        .optional(),\n      liqe_query: z.string().optional(),\n    }),\n    jsonResponse: z.object({\n      manufacturers: schemas.manufacturer.array(),\n    }),\n  },\n} as const\n"]}